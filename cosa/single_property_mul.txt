[GENERAL]
model_file: ridecore.vlist[top],reset_procedure.ets,init.ssts,state_copy.ssts,nop_m.ssts
clock_behaviors: DetClock(clk, 1)
vcd: True

[DEFAULT]
bmc_length: 27
solver_name: btor
precondition: reset_done
no_arrays: False
default_initial_value: 0
prove: False

[Single Instruction for MUL_V1]
description: "Check for Single Instruction"
assumptions: (state_counter = 7_10) -> ((opcode = 51_7) & (funct3 = 0_3)& (funct7 = 1_7)& (rd != 0_5) & (pipe.aregfile.regfile.mem[rs2] = 1_32) & (next(instruction)= instruction));(state_counter = 8_10) -> ((next(instruction)= instruction));(state_counter = 9_10) -> ((next(instruction)= instruction));(state_counter = 19_10) -> ((next(val1) = pipe.aregfile.regfile.mem[rs1_copy]) & (next(val2) = pipe.aregfile.regfile.mem[rs2_copy]));
formula: (state_counter = 22_10)-> (pipe.aregfile.regfile.mem[rd_copy] = val1)
verification: safety
bmc_length_min: 20

[Single Instruction for MUL_V2]
description: "Check for Single Instruction"
assumptions: (state_counter = 7_10) -> ((opcode = 51_7) & (funct3 = 0_3)& (funct7 = 1_7)& (rd != 0_5)& (pipe.aregfile.regfile.mem[rs1] = 1_32) & (next(instruction)= instruction));(state_counter = 8_10) -> ((next(instruction)= instruction));(state_counter = 9_10) -> ((next(instruction)= instruction));(state_counter = 19_10) -> ((next(val1) = pipe.aregfile.regfile.mem[rs1_copy]) & (next(val2) = pipe.aregfile.regfile.mem[rs2_copy]));
formula: (state_counter = 22_10)-> (pipe.aregfile.regfile.mem[rd_copy] = val2)
verification: safety
bmc_length_min: 20

[Single Instruction for MUL_V3]
description: "Check for Single Instruction"
assumptions: (state_counter = 7_10) -> ((opcode = 51_7) & (funct3 = 0_3)& (funct7 = 1_7)& (rd != 0_5)& (rs2 = 0_5) &(next(instruction)= instruction));(state_counter = 8_10) -> ((next(instruction)= instruction));(state_counter = 9_10) -> ((next(instruction)= instruction));(state_counter = 19_10) -> ((next(val1) = pipe.aregfile.regfile.mem[rs1_copy]) & (next(val2) = pipe.aregfile.regfile.mem[rs2_copy]));
formula: (state_counter = 22_10)-> (pipe.aregfile.regfile.mem[rd_copy] = 0_32)
verification: safety
bmc_length_min: 20

[Single Instruction for MUL_V4]
description: "Check for Single Instruction"
assumptions: (state_counter = 7_10) -> ((opcode = 51_7) & (funct3 = 0_3)& (funct7 = 1_7)& (rd != 0_5) & (rs1 = 0_5)&(next(instruction)= instruction));(state_counter = 8_10) -> ((next(instruction)= instruction));(state_counter = 9_10) -> ((next(instruction)= instruction));(state_counter = 19_10) -> ((next(val1) = pipe.aregfile.regfile.mem[rs1_copy]) & (next(val2) = pipe.aregfile.regfile.mem[rs2_copy]));
formula: (state_counter = 22_10)-> (pipe.aregfile.regfile.mem[rd_copy] = 0_32)
verification: safety
bmc_length_min: 20
