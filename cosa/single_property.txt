[GENERAL]
model_file: ridecore.vlist[top],reset_procedure.ets,init.ssts,state_copy.ssts,nop_m.ssts
clock_behaviors: DetClock(clk, 1)
vcd: True

[DEFAULT]
bmc_length: 27
solver_name: btor
precondition: reset_done
no_arrays: False
default_initial_value: 0
prove: False

[Single Instruction for LW]
description: "Check for Single Instruction"
assumptions: (state_counter = 7_10) -> ((opcode = 3_7) &(funct3 = 2_3) & (rd!= 0_5) &(next(instruction)= instruction));(state_counter = 8_10) -> ((next(instruction)= instruction));(state_counter = 9_10) -> ((next(instruction)= instruction));(state_counter = 19_10) -> ((next(val1) = pipe.aregfile.regfile.mem[rs1_copy])); (state_counter = 20_10) -> ((next(addr) = val1+imm_copy)) ;
formula: (state_counter = 26_10)-> (datamemory.mem[addr[2:8]] = pipe.aregfile.regfile.mem[rd_copy])
verification: safety
bmc_length_min: 20

[Single Instruction for SW]
description: "Check for Single Instruction"
assumptions: (state_counter = 7_10) -> ((opcode = 35_7) & (funct3 = 2_3) & (rd!= 0_5)&(next(instruction)= instruction));(state_counter = 8_10) -> ((next(instruction)= instruction));(state_counter = 9_10) -> ((next(instruction)= instruction));(state_counter = 19_10) -> ((next(val1) = pipe.aregfile.regfile.mem[rs1_copy])& (next(val2) = pipe.aregfile.regfile.mem[rs2_copy]) & (next(imm_new) = funct7_copy::rd_copy)); (state_counter = 20_10) -> ((next(addr_sw) = val1[0:11]+imm_new)) ;
formula: (state_counter = 26_10)-> (datamemory.mem[addr_sw[2:8]] = pipe.aregfile.regfile.mem[rs2_copy])
verification: safety
bmc_length_min: 20
