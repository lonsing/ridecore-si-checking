[runlim] version:		1.10
[runlim] time limit:		311040000 seconds
[runlim] real time limit:	311040000 seconds
[runlim] space limit:		32164 MB
[runlim] argv[0]:		./testing-workflow/run-si-tests.sh
[runlim] argv[1]:		./cosa/
[runlim] argv[2]:		./testing-workflow/bug-injection-patches/
[runlim] argv[3]:		ridecore-original-src/
[runlim] start:			Tue Apr 16 17:58:38 2019
[runlim] main pid:		17607
CoSA problem file: ./cosa/single_property_ORI.txt
Operator name: ORI
  Bug injection patch file for instruction ORI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ORI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ORI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		9.9 time, 10.9 real, 202.3 MB
[runlim] sample:		0.7 time, 20.9 real, 62.7 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction For ORI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		10.7 time, 30.9 real, 477.4 MB
___[runlim] sample:		20.7 time, 40.9 real, 636.6 MB
___[runlim] sample:		30.7 time, 50.9 real, 887.5 MB
__[runlim] sample:		40.7 time, 60.9 real, 1088.8 MB
__[runlim] sample:		50.7 time, 70.9 real, 1329.8 MB
__[runlim] sample:		60.7 time, 80.9 real, 1521.6 MB
__[runlim] sample:		70.7 time, 90.9 real, 1820.1 MB
_[runlim] sample:		80.7 time, 100.9 real, 1928.2 MB
__[runlim] sample:		90.7 time, 110.9 real, 2036.6 MB
_[runlim] sample:		100.7 time, 120.9 real, 2184.8 MB
__.[runlim] sample:		110.6 time, 130.9 real, 2368.1 MB
.[runlim] sample:		120.6 time, 140.9 real, 2494.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction For ORI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 553672831_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741824_32][17_5 := 2147483648_32][24_5 := 1024_32][6_5 := 256_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 33554432_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553652351_32
  S3: state_counter = 3_10
  S3: val1 = 0_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 83887231_32
  S4: state_counter = 4_10
  S4: val1 = 1610612736_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 33554483_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 2173067539_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 4294965272_32
  S8: rd_copy = 2_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1342177280_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1107296256_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1074791551_32
  S11: state_counter = 11_10
  S11: val1 = 1073741856_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4279275135_32
  S12: state_counter = 12_10
  S12: val1 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741826_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2165309567_32
  S14: state_counter = 14_10
  S14: val1 = 0_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 16974719_32
  S16: state_counter = 16_10
  S16: val1 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 10485887_32
  S18: state_counter = 18_10
  S18: val1 = 8388608_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 24_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073768575_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 150999167_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741824_32][17_5 := 2147483648_32][24_5 := 1024_32][2_5 := 3221223448_32][6_5 := 256_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction For ORI.vcd
[runlim] sample:		130.6 time, 150.9 real, 2443.1 MB
  Test for ORI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ORI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction ORI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_ORI.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_ORI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		6.1 time, 160.9 real, 202.5 MB
[runlim] sample:		16.1 time, 170.9 real, 202.5 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction For ORI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		7.0 time, 180.9 real, 368.7 MB
__[runlim] sample:		17.0 time, 190.9 real, 606.2 MB
___[runlim] sample:		27.0 time, 200.9 real, 775.1 MB
___[runlim] sample:		37.0 time, 210.9 real, 1070.5 MB
_[runlim] sample:		47.0 time, 220.9 real, 1183.2 MB
__[runlim] sample:		56.9 time, 230.9 real, 1461.5 MB
__[runlim] sample:		66.9 time, 240.9 real, 1651.4 MB
__[runlim] sample:		76.9 time, 250.9 real, 1833.0 MB
_[runlim] sample:		86.9 time, 260.9 real, 2015.3 MB
_[runlim] sample:		96.9 time, 270.9 real, 2147.0 MB
_[runlim] sample:		106.9 time, 280.9 real, 2177.4 MB
_[runlim] sample:		116.9 time, 290.9 real, 2356.9 MB
_..[runlim] sample:		126.9 time, 300.9 real, 2565.2 MB
[runlim] sample:		136.9 time, 310.9 real, 2629.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction For ORI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 620781695_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 4194304_32][30_5 := 262144_32][4_5 := 2_32][5_5 := 8194_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890303_32
  S1: state_counter = 1_10

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553648255_32
  S2: state_counter = 2_10
  S2: val1 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553914495_32
  S3: state_counter = 3_10
  S3: val1 = 2164260864_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 822349951_32
  S4: state_counter = 4_10
  S4: val1 = 268435456_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 8195_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 10675987_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 3221225472_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 10_32
  S8: rd_copy = 14_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1077936128_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 8194_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1086325887_32
  S11: state_counter = 11_10
  S11: val1 = 1610612736_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4293396863_32
  S12: state_counter = 12_10
  S12: val1 = 8192_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 3221225472_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2148663423_32
  S14: state_counter = 14_10
  S14: val1 = 8196_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4279795839_32
  S16: state_counter = 16_10
  S16: val1 = 8192_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 4915327_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073750018_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 8194_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1124098175_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 285216895_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 4194304_32][14_5 := 8200_32][30_5 := 262144_32][4_5 := 2_32][5_5 := 8194_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction For ORI.vcd
  Test for ORI using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_ORI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction ORI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ORI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ORI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		3.2 time, 320.9 real, 192.3 MB
[runlim] sample:		13.2 time, 330.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction For ORI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.3 time, 340.9 real, 211.3 MB
_[runlim] sample:		13.3 time, 350.9 real, 521.8 MB
___[runlim] sample:		23.3 time, 360.9 real, 699.6 MB
__[runlim] sample:		33.3 time, 370.9 real, 970.0 MB
___[runlim] sample:		43.3 time, 380.9 real, 1105.2 MB
__[runlim] sample:		53.3 time, 390.9 real, 1389.0 MB
__[runlim] sample:		63.3 time, 400.9 real, 1539.5 MB
__[runlim] sample:		73.3 time, 410.9 real, 1829.0 MB
_[runlim] sample:		83.3 time, 420.9 real, 2016.0 MB
__[runlim] sample:		93.3 time, 430.9 real, 2178.2 MB
_[runlim] sample:		103.3 time, 440.9 real, 2261.6 MB
_.[runlim] sample:		113.3 time, 450.9 real, 2395.7 MB
.[runlim] sample:		123.3 time, 460.9 real, 2561.1 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction For ORI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 553672831_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 4096_32][13_5 := 262144_32][16_5 := 8192_32][17_5 := 262144_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 1073741824_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 268435456_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1077937279_32
  S4: state_counter = 4_10
  S4: val1 = 1107296256_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 33554483_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 11985043_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 11_32
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 3221225472_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 262208_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1074824319_32
  S11: state_counter = 11_10
  S11: val1 = 1073741824_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2165345407_32
  S12: state_counter = 12_10
  S12: val1 = 262146_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741824_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 4262461567_32
  S14: state_counter = 14_10
  S14: val1 = 262144_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 17335167_32
  S16: state_counter = 16_10
  S16: val1 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 32895_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1074003968_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 262144_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073768575_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 16781439_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction For ORI.vcd
[runlim] sample:		133.2 time, 470.9 real, 2483.3 MB
  Test for ORI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ORI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_MUL_V2.txt
Operator name: MUL_V2
  No bug injection patches found for instruction MUL_V2, skipping tests.
CoSA problem file: ./cosa/single_property_BEQ.txt
Operator name: BEQ
  No bug injection patches found for instruction BEQ, skipping tests.
CoSA problem file: ./cosa/single_property_SRL.txt
Operator name: SRL
  Bug injection patch file for instruction SRL:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRL.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRL.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		7.4 time, 480.9 real, 202.9 MB
[runlim] sample:		17.4 time, 490.9 real, 202.9 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRL" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		7.5 time, 500.9 real, 368.6 MB
__[runlim] sample:		17.5 time, 510.9 real, 542.7 MB
___[runlim] sample:		27.5 time, 520.9 real, 765.5 MB
__[runlim] sample:		37.5 time, 530.9 real, 1017.5 MB
___[runlim] sample:		47.5 time, 540.9 real, 1240.3 MB
__[runlim] sample:		57.5 time, 550.9 real, 1457.1 MB
__[runlim] sample:		67.5 time, 560.9 real, 1641.9 MB
_[runlim] sample:		77.5 time, 570.9 real, 1909.1 MB
_[runlim] sample:		87.5 time, 580.9 real, 2055.0 MB
_[runlim] sample:		97.5 time, 590.9 real, 2101.7 MB
__[runlim] sample:		107.5 time, 600.9 real, 2243.9 MB
_.[runlim] sample:		117.5 time, 610.9 real, 2306.0 MB
.[runlim] sample:		127.5 time, 620.9 real, 2529.8 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRL **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 553668735_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 2147483657_32][15_5 := 1_32][1_5 := 1073741824_32][30_5 := 1073741825_32][9_5 := 67108864_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 536875135_32
  S1: state_counter = 1_10
  S1: val1 = 33554465_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 32768_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553652351_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 285216895_32
  S4: state_counter = 4_10
  S4: val1 = 2181038080_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 150999167_32
  S5: state_counter = 5_10
  S5: val1 = 67109128_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 10801331_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 67174400_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1207959552_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1212543_32
  S11: state_counter = 11_10
  S11: val1 = 67108866_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2129825663_32
  S12: state_counter = 12_10
  S12: val1 = 33554432_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 127_32
  S13: state_counter = 13_10

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 12091519_32
  S14: state_counter = 14_10
  S14: val1 = 1140850688_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 524415_32
  S15: state_counter = 15_10
  S15: val1 = 67110912_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1092223103_32
  S16: state_counter = 16_10
  S16: val1 = 67109376_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 524415_32
  S17: state_counter = 17_10
  S17: val1 = 67108864_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 541888639_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 67108928_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 67108864_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 20607_32
  S21: shimm2_copy = 9_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 285216895_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 2147483657_32][15_5 := 1_32][30_5 := 1073741825_32][9_5 := 67108864_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRL.vcd
[runlim] sample:		137.5 time, 630.9 real, 2033.8 MB
  Test for SRL using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRL.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SRL:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SRL.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SRL.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		8.3 time, 640.9 real, 203.3 MB
[runlim] sample:		18.3 time, 650.9 real, 253.6 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRL" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		8.2 time, 660.9 real, 368.1 MB
__[runlim] sample:		18.2 time, 670.9 real, 600.2 MB
___[runlim] sample:		28.1 time, 680.9 real, 837.1 MB
___[runlim] sample:		38.1 time, 690.9 real, 1026.9 MB
__[runlim] sample:		48.1 time, 700.9 real, 1256.7 MB
__[runlim] sample:		58.1 time, 710.9 real, 1461.5 MB
__[runlim] sample:		68.1 time, 720.9 real, 1644.2 MB
_[runlim] sample:		78.1 time, 730.9 real, 1880.3 MB
__[runlim] sample:		88.1 time, 740.9 real, 2086.9 MB
_[runlim] sample:		98.1 time, 750.9 real, 2160.0 MB
_[runlim] sample:		108.1 time, 760.9 real, 2223.6 MB
_.[runlim] sample:		118.1 time, 770.9 real, 2309.1 MB
.[runlim] sample:		128.1 time, 780.9 real, 2513.8 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRL **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 134754431_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 2147483648_32][1_5 := 536870912_32][25_5 := 1073741824_32][4_5 := 1_32][5_5 := 48_32][7_5 := 4097_32][8_5 := 2147483648_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 268963967_32
  S1: state_counter = 1_10
  S1: val1 = 2147483683_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 67637375_32
  S2: state_counter = 2_10
  S2: val1 = 67108864_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 537399423_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 12867251_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 1207959552_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 2147483712_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 29524095_32
  S11: state_counter = 11_10
  S11: val1 = 2147483648_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 14846847_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 20971647_32
  S13: state_counter = 13_10
  S13: val1 = 2147483648_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 131199_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 2147483648_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1075019903_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 268963967_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 67115135_32
  S19: state_counter = 19_10
  S19: val1 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 545788031_32
  S20: state_counter = 20_10
  S20: val1 = 2147483648_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 20607_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 134223999_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRL.vcd
  Test for SRL using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SRL.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SRL:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRL.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRL.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		0.3 time, 790.9 real, 45.3 MB
[runlim] sample:		10.3 time, 800.9 real, 202.6 MB
[runlim] sample:		20.3 time, 810.9 real, 284.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRL" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		10.2 time, 820.9 real, 477.6 MB
___[runlim] sample:		20.2 time, 830.9 real, 638.8 MB
__[runlim] sample:		30.2 time, 840.9 real, 819.8 MB
___[runlim] sample:		40.2 time, 850.9 real, 1066.8 MB
__[runlim] sample:		50.2 time, 860.9 real, 1283.3 MB
__[runlim] sample:		60.2 time, 870.9 real, 1494.6 MB
__[runlim] sample:		70.2 time, 880.9 real, 1685.9 MB
_[runlim] sample:		80.2 time, 890.9 real, 1915.5 MB
_[runlim] sample:		90.2 time, 900.9 real, 2031.2 MB
__[runlim] sample:		100.2 time, 910.9 real, 2179.7 MB
_[runlim] sample:		110.2 time, 920.9 real, 2353.6 MB
_..[runlim] sample:		120.2 time, 930.9 real, 2482.9 MB
[runlim] sample:		130.2 time, 940.9 real, 2579.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRL **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 117461119_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 1073741824_32][17_5 := 3221232640_32][25_5 := 1073741825_32][2_5 := 1_32][9_5 := 1_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 538968324_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 285216895_32
  S2: state_counter = 2_10
  S2: val1 = 134217728_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553648767_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 562041471_32
  S4: state_counter = 4_10
  S4: val1 = 1090519040_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 159388287_32
  S5: state_counter = 5_10
  S5: val1 = 16777216_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1140850688_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 13947059_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741840_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 16_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1083180671_32
  S11: state_counter = 11_10
  S11: val1 = 1073741824_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 1075348351_32
  S12: state_counter = 12_10
  S12: val1 = 1_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741824_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 32895_32
  S14: state_counter = 14_10
  S14: val1 = 2_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4278715263_32
  S16: state_counter = 16_10
  S16: val1 = 8192_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 127_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073741824_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 1_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 16797823_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 6271_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRL.vcd
  Test for SRL using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRL.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_SLLI.txt
Operator name: SLLI
  Bug injection patch file for instruction SLLI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLLI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLLI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.5 time, 950.9 real, 191.2 MB
[runlim] sample:		12.5 time, 960.9 real, 202.3 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLLI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.0 time, 970.9 real, 155.4 MB
_[runlim] sample:		13.0 time, 980.9 real, 495.5 MB
___[runlim] sample:		23.0 time, 990.9 real, 702.9 MB
__[runlim] sample:		33.0 time, 1000.9 real, 877.5 MB
__[runlim] sample:		43.0 time, 1010.9 real, 1094.6 MB
__[runlim] sample:		53.0 time, 1020.9 real, 1304.2 MB
__[runlim] sample:		63.0 time, 1030.9 real, 1478.5 MB
__[runlim] sample:		73.0 time, 1040.9 real, 1659.0 MB
_[runlim] sample:		83.0 time, 1050.9 real, 1882.1 MB
_[runlim] sample:		93.0 time, 1060.9 real, 2037.6 MB
_[runlim] sample:		103.0 time, 1070.9 real, 2106.6 MB
__[runlim] sample:		113.0 time, 1080.9 real, 2226.2 MB
_.[runlim] sample:		123.0 time, 1090.9 real, 2291.5 MB
.[runlim] sample:		133.0 time, 1100.9 real, 2513.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLLI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 562040959_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 2147483648_32][1_5 := 262144_32][4_5 := 34_32][8_5 := 1073741840_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553660543_32
  S1: state_counter = 1_10
  S1: val1 = 16777216_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 536875135_32
  S2: state_counter = 2_10
  S2: val1 = 1073741824_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 822087807_32
  S3: state_counter = 3_10
  S3: val1 = 67108864_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 14947603_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 10_5
  S8: shimm_copy = 14_32
  S8: state_counter = 8_10
  S8: val1 = 1140850688_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1074266112_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 9568383_32
  S11: state_counter = 11_10
  S11: val1 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 15862271_32
  S12: state_counter = 12_10
  S12: val1 = 1073741840_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 16777343_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 4272229119_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1074004095_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 8913151_32
  S17: state_counter = 17_10
  S17: val1 = 1048576_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 542906623_32
  S18: state_counter = 18_10
  S18: val1 = 2148532224_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 822089855_32
  S19: state_counter = 19_10
  S19: val1 = 1048576_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 83890303_32
  S20: state_counter = 20_10
  S20: val1 = 1073741840_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 88084607_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 1073741854_32][14_5 := 2147483648_32][1_5 := 262144_32][4_5 := 34_32][8_5 := 1073741840_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLLI.vcd
  Test for SLLI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLLI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLLI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLLI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLLI.txt
[runlim] sample:		0.1 time, 1110.9 real, 19.4 MB
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		10.0 time, 1120.9 real, 202.4 MB
[runlim] sample:		0.7 time, 1130.9 real, 62.0 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLLI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		10.7 time, 1140.9 real, 477.8 MB
__[runlim] sample:		20.7 time, 1150.9 real, 636.9 MB
___[runlim] sample:		30.7 time, 1160.9 real, 795.1 MB
__[runlim] sample:		40.7 time, 1170.9 real, 1042.6 MB
__[runlim] sample:		50.6 time, 1180.9 real, 1277.2 MB
__[runlim] sample:		60.7 time, 1190.9 real, 1469.7 MB
__[runlim] sample:		70.7 time, 1200.9 real, 1644.4 MB
_[runlim] sample:		80.7 time, 1210.9 real, 1881.2 MB
__[runlim] sample:		90.6 time, 1220.9 real, 2088.1 MB
_[runlim] sample:		100.6 time, 1230.9 real, 2123.8 MB
_[runlim] sample:		110.6 time, 1240.9 real, 2222.3 MB
_.[runlim] sample:		120.6 time, 1250.9 real, 2344.5 MB
.[runlim] sample:		130.6 time, 1260.9 real, 2512.0 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLLI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 562040959_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 8_32][13_5 := 3221225534_32][15_5 := 2147483648_32][1_5 := 1073741880_32][4_5 := 32_32][5_5 := 2147483710_32][8_5 := 2147483697_32][9_5 := 3221225522_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553660543_32
  S1: state_counter = 1_10
  S1: val1 = 553648128_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 285216895_32
  S2: state_counter = 2_10
  S2: val1 = 1610612736_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 150999167_32
  S3: state_counter = 3_10
  S3: val1 = 1048576_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1082131583_32
  S5: state_counter = 5_10
  S5: val1 = 3221225472_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 15996051_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 9_5
  S8: shimm_copy = 15_32
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 2147483696_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1610612736_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 8421503_32
  S11: state_counter = 11_10
  S11: val1 = 2147483680_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4103113599_32
  S12: state_counter = 12_10
  S12: val1 = 2147483648_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 2097279_32
  S13: state_counter = 13_10
  S13: val1 = 1342177280_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2127691903_32
  S14: state_counter = 14_10
  S14: val1 = 1610612736_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 1073745920_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1091731583_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 2147483648_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 549458047_32
  S18: state_counter = 18_10
  S18: val1 = 2214592512_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073741824_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 2147483697_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 134221951_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 8_32][13_5 := 3221225534_32][15_5 := 2147483648_32][1_5 := 1073741880_32][4_5 := 32_32][5_5 := 2147483710_32][8_5 := 2147483697_32][9_5 := 2147483710_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLLI.vcd
[runlim] sample:		140.6 time, 1270.9 real, 2041.9 MB
  Test for SLLI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLLI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLLI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLLI.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SLLI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		9.5 time, 1280.9 real, 202.7 MB
[runlim] sample:		0.4 time, 1290.9 real, 54.9 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLLI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		10.3 time, 1300.9 real, 480.6 MB
__[runlim] sample:		20.4 time, 1310.9 real, 683.8 MB
___[runlim] sample:		30.3 time, 1320.9 real, 900.0 MB
__[runlim] sample:		40.3 time, 1330.9 real, 1083.3 MB
__[runlim] sample:		50.3 time, 1340.9 real, 1329.9 MB
__[runlim] sample:		60.3 time, 1350.9 real, 1519.4 MB
__[runlim] sample:		70.3 time, 1360.9 real, 1787.1 MB
_[runlim] sample:		80.3 time, 1370.9 real, 1917.9 MB
_[runlim] sample:		90.3 time, 1380.9 real, 2009.9 MB
__[runlim] sample:		100.3 time, 1390.9 real, 2178.0 MB
_[runlim] sample:		110.3 time, 1400.9 real, 2264.2 MB
_..[runlim] sample:		120.3 time, 1410.9 real, 2439.0 MB
[runlim] sample:		130.3 time, 1420.9 real, 2512.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLLI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 557846655_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 1073741825_32][17_5 := 3221225472_32][1_5 := 131072_32][24_5 := 3221225472_32][25_5 := 256_32][29_5 := 1073741824_32][3_5 := 1_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553660543_32
  S1: state_counter = 1_10
  S1: val1 = 1140850688_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 822087807_32
  S2: state_counter = 2_10
  S2: val1 = 0_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 84148351_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073808511_32
  S4: state_counter = 4_10
  S4: val1 = 1610612736_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 8396835_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1478803_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: shimm_copy = 1_32
  S8: state_counter = 8_10
  S8: val1 = 2147483648_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073742084_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1074824319_32
  S11: state_counter = 11_10
  S11: val1 = 1140850688_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4287663231_32
  S12: state_counter = 12_10
  S12: val1 = 1073741828_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1107296256_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2131755135_32
  S14: state_counter = 14_10
  S14: val1 = 1073741840_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1342177280_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 17924223_32
  S16: state_counter = 16_10
  S16: val1 = 1073741952_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1140850688_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 20971647_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 3221225473_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 1048703_32
  S20: state_counter = 20_10
  S20: val1 = 1073741825_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 4223_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 1073741825_32][17_5 := 3221225472_32][1_5 := 1073741824_32][24_5 := 3221225472_32][25_5 := 256_32][29_5 := 1073741824_32][3_5 := 1_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLLI.vcd
[runlim] sample:		140.3 time, 1430.9 real, 2444.4 MB
  Test for SLLI using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLLI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_AND.txt
Operator name: AND
  Bug injection patch file for instruction AND:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_AND.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_AND.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		7.8 time, 1440.9 real, 201.8 MB
[runlim] sample:		17.8 time, 1450.9 real, 270.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for AND" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		8.5 time, 1460.9 real, 368.2 MB
___[runlim] sample:		18.5 time, 1470.9 real, 636.8 MB
__[runlim] sample:		28.5 time, 1480.9 real, 816.0 MB
___[runlim] sample:		38.5 time, 1490.9 real, 1021.9 MB
__[runlim] sample:		48.5 time, 1500.9 real, 1246.9 MB
__[runlim] sample:		58.5 time, 1510.9 real, 1490.6 MB
__[runlim] sample:		68.5 time, 1520.9 real, 1651.6 MB
_[runlim] sample:		78.5 time, 1530.9 real, 1871.2 MB
__[runlim] sample:		88.5 time, 1540.9 real, 2066.5 MB
_[runlim] sample:		98.5 time, 1550.9 real, 2196.8 MB
_[runlim] sample:		108.5 time, 1560.9 real, 2291.2 MB
_..[runlim] sample:		118.4 time, 1570.9 real, 2458.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for AND **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 151023743_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 16_32][1_5 := 1073741824_32][9_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890303_32
  S1: state_counter = 1_10
  S1: val1 = 2097409_32
  S1: val2 = 67108865_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 2415919104_32
  S2: val2 = 33554432_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83890303_32
  S3: state_counter = 3_10
  S3: val1 = 268435456_32
  S3: val2 = 1207959552_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 16777216_32
  S4: val2 = 8388608_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285216895_32
  S5: state_counter = 5_10
  S5: val1 = 2147483648_32
  S5: val2 = 1140850688_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 9498803_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 1107296256_32
  S8: val2 = 1073741824_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741824_32
  S9: val2 = 3221225472_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1207959552_32
  S10: val2 = 1073741824_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 28344447_32
  S11: state_counter = 11_10
  S11: val1 = 1073741826_32
  S11: val2 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2129693567_32
  S12: state_counter = 12_10
  S12: val1 = 1610612736_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 16777343_32
  S13: state_counter = 13_10
  S13: val1 = 1074266112_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 1081471_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1092092031_32
  S16: state_counter = 16_10
  S16: val1 = 2147483648_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 542118015_32
  S18: state_counter = 18_10
  S18: val1 = 2147483648_32
  S18: val2 = 2147483648_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32
  S20: val2 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 134246527_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 16_32][9_5 := 1073741824_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for AND.vcd
[runlim] sample:		128.4 time, 1580.9 real, 2560.1 MB
  Test for AND using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_AND.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction AND:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_AND.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_AND.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		4.1 time, 1590.9 real, 192.3 MB
[runlim] sample:		14.1 time, 1600.9 real, 202.3 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for AND" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		5.1 time, 1610.9 real, 283.0 MB
__[runlim] sample:		15.0 time, 1620.9 real, 532.8 MB
__[runlim] sample:		25.0 time, 1630.9 real, 755.8 MB
___[runlim] sample:		34.9 time, 1640.9 real, 993.7 MB
__[runlim] sample:		44.9 time, 1650.9 real, 1151.9 MB
__[runlim] sample:		54.8 time, 1660.9 real, 1429.2 MB
__[runlim] sample:		64.8 time, 1670.9 real, 1620.5 MB
__[runlim] sample:		74.8 time, 1680.9 real, 1853.7 MB
_[runlim] sample:		84.8 time, 1690.9 real, 1910.8 MB
_[runlim] sample:		94.8 time, 1700.9 real, 2085.7 MB
_[runlim] sample:		104.8 time, 1710.9 real, 2157.4 MB
_[runlim] sample:		114.8 time, 1720.9 real, 2284.3 MB
_..[runlim] sample:		124.8 time, 1730.9 real, 2492.3 MB
[runlim] sample:		134.8 time, 1740.9 real, 2514.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for AND **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285241471_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 3221225472_32][1_5 := 2147483648_32][2_5 := 2147483648_32][4_5 := 2147483648_32][5_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 822087807_32
  S1: state_counter = 1_10
  S1: val1 = 2149581057_32
  S1: val2 = 67108869_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 1342177280_32
  S2: val2 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 536903680_32
  S3: val2 = 1090551808_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 150999167_32
  S4: state_counter = 4_10
  S4: val1 = 37781504_32
  S4: val2 = 67141632_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 553652351_32
  S5: state_counter = 5_10
  S5: val1 = 1090551808_32
  S5: val2 = 536903680_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1342210048_32
  S6: val2 = 65536_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 15922739_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 12_5
  S8: state_counter = 8_10
  S8: val1 = 8388608_32
  S8: val2 = 1342177280_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32
  S9: val2 = 3221241856_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741840_32
  S10: val2 = 1073741824_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 12615807_32
  S11: state_counter = 11_10
  S11: val1 = 0_32
  S11: val2 = 2_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 9471615_32
  S12: state_counter = 12_10
  S12: val1 = 1073741856_32
  S12: val2 = 3221225474_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 127_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 8716671_32
  S14: state_counter = 14_10
  S14: val1 = 1073741832_32
  S14: val2 = 3221225472_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2097279_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1099006079_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 3221225472_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 255_32
  S17: state_counter = 17_10
  S17: val1 = 1075904512_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 538056831_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 285216895_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 2147483648_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32
  S20: val2 = 3221225472_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 536899711_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 2147483648_32][15_5 := 3221225472_32][1_5 := 2147483648_32][2_5 := 2147483648_32][4_5 := 2147483648_32][5_5 := 1073741824_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for AND.vcd
  Test for AND using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_AND.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction AND:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_AND.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_AND.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		0.5 time, 1750.9 real, 72.3 MB
[runlim] sample:		10.5 time, 1760.9 real, 202.9 MB
[runlim] sample:		0.8 time, 1770.9 real, 68.0 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for AND" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		10.9 time, 1780.9 real, 481.2 MB
__[runlim] sample:		20.9 time, 1790.9 real, 687.3 MB
___[runlim] sample:		30.8 time, 1800.9 real, 844.5 MB
__[runlim] sample:		40.8 time, 1810.9 real, 1068.8 MB
___[runlim] sample:		50.8 time, 1820.9 real, 1328.4 MB
_[runlim] sample:		60.8 time, 1830.9 real, 1522.8 MB
__[runlim] sample:		70.8 time, 1840.9 real, 1800.6 MB
__[runlim] sample:		80.8 time, 1850.9 real, 2003.4 MB
_[runlim] sample:		90.8 time, 1860.9 real, 2135.3 MB
_[runlim] sample:		100.8 time, 1870.9 real, 2179.9 MB
_[runlim] sample:		110.8 time, 1880.9 real, 2356.3 MB
_..[runlim] sample:		120.8 time, 1890.9 real, 2555.0 MB
[runlim] sample:		130.8 time, 1900.9 real, 2627.6 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for AND **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 151023743_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 1073750016_32][16_5 := 1077936129_32][17_5 := 8388608_32][1_5 := 2147483648_32][2_5 := 2147483648_32][9_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890303_32
  S1: state_counter = 1_10
  S1: val1 = 2097409_32
  S1: val2 = 1140850689_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 67108864_32
  S2: val2 = 16777216_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 557846655_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32
  S3: val2 = 268435456_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 566235263_32
  S4: state_counter = 4_10
  S4: val1 = 536870912_32
  S4: val2 = 1140850688_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 88085631_32
  S5: state_counter = 5_10
  S5: val1 = 1610612736_32
  S5: val2 = 134217728_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1074005011_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1610612736_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 16052403_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 268435456_32
  S7: val2 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 0_32
  S8: val2 = 2097152_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1610612736_32
  S9: val2 = 1342177280_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073758208_32
  S10: val2 = 0_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1073775743_32
  S11: state_counter = 11_10
  S11: val1 = 1073741840_32
  S11: val2 = 1073752064_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4279271551_32
  S12: state_counter = 12_10
  S12: val1 = 0_32
  S12: val2 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741952_32
  S13: val2 = 1073750016_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 1083179135_32
  S14: state_counter = 14_10
  S14: val1 = 0_32
  S14: val2 = 0_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32
  S15: val2 = 1073750016_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 17301631_32
  S16: state_counter = 16_10
  S16: val1 = 0_32
  S16: val2 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741825_32
  S17: val2 = 1073750016_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 2097279_32
  S18: state_counter = 18_10
  S18: val1 = 0_32
  S18: val2 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 33554432_32
  S19: val2 = 268435460_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32
  S20: val2 = 1073750016_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 28799_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 1073750016_32][16_5 := 1077936129_32][17_5 := 8388608_32][2_5 := 2147483648_32][9_5 := 1073741824_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for AND.vcd
  Test for AND using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_AND.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_MUL_V1.txt
Operator name: MUL_V1
  No bug injection patches found for instruction MUL_V1, skipping tests.
CoSA problem file: ./cosa/single_property_BLTU.txt
Operator name: BLTU
  No bug injection patches found for instruction BLTU, skipping tests.
CoSA problem file: ./cosa/single_property_SRLI.txt
Operator name: SRLI
  Bug injection patch file for instruction SRLI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRLI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRLI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		3.4 time, 1910.9 real, 192.0 MB
[runlim] sample:		13.4 time, 1920.9 real, 203.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRLI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		4.3 time, 1930.9 real, 274.0 MB
__[runlim] sample:		14.3 time, 1940.9 real, 541.1 MB
__[runlim] sample:		24.3 time, 1950.9 real, 711.3 MB
___[runlim] sample:		34.3 time, 1960.9 real, 979.2 MB
__[runlim] sample:		44.3 time, 1970.9 real, 1138.4 MB
__[runlim] sample:		54.3 time, 1980.9 real, 1417.4 MB
__[runlim] sample:		64.3 time, 1990.9 real, 1585.3 MB
__[runlim] sample:		74.3 time, 2000.9 real, 1862.3 MB
_[runlim] sample:		84.3 time, 2010.9 real, 1928.0 MB
_[runlim] sample:		94.3 time, 2020.9 real, 2102.8 MB
__[runlim] sample:		104.3 time, 2030.9 real, 2213.4 MB
_.[runlim] sample:		114.3 time, 2040.9 real, 2279.0 MB
.[runlim] sample:		124.3 time, 2050.9 real, 2513.0 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRLI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 557863039_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[1_5 := 3221225472_32][24_5 := 67108864_32][8_5 := 1140850688_32][9_5 := 3288334336_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553660543_32
  S1: state_counter = 1_10
  S1: val1 = 33554432_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 83890303_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553652863_32
  S3: state_counter = 3_10
  S3: val1 = 201326592_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1207959552_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 14963859_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 9_5
  S8: shimm_copy = 14_32
  S8: state_counter = 8_10
  S8: val1 = 33554432_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1210056704_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 12615807_32
  S11: state_counter = 11_10
  S11: val1 = 1140850689_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 14715775_32
  S12: state_counter = 12_10
  S12: val1 = 1140850688_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 25723007_32
  S14: state_counter = 14_10
  S14: val1 = 1207959552_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2097279_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1073873023_32
  S16: state_counter = 16_10
  S16: val1 = 1140858880_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 92278911_32
  S18: state_counter = 18_10
  S18: val1 = 16777216_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 285216895_32
  S20: state_counter = 20_10
  S20: val1 = 1140850688_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 20607_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 83890303_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[1_5 := 3221225472_32][24_5 := 67108864_32][8_5 := 1140850688_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRLI.vcd
[runlim] sample:		134.3 time, 2060.9 real, 2435.2 MB
  Test for SRLI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRLI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SRLI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRLI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRLI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		6.9 time, 2070.9 real, 202.1 MB
[runlim] sample:		16.8 time, 2080.9 real, 202.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRLI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		7.7 time, 2090.9 real, 368.5 MB
___[runlim] sample:		17.7 time, 2100.9 real, 598.7 MB
__[runlim] sample:		27.7 time, 2110.9 real, 848.2 MB
___[runlim] sample:		37.7 time, 2120.9 real, 1021.0 MB
__[runlim] sample:		47.7 time, 2130.9 real, 1206.3 MB
__[runlim] sample:		57.7 time, 2140.9 real, 1455.1 MB
_[runlim] sample:		67.7 time, 2150.9 real, 1619.9 MB
__[runlim] sample:		77.7 time, 2160.9 real, 1852.6 MB
_[runlim] sample:		87.7 time, 2170.9 real, 1910.3 MB
_[runlim] sample:		97.7 time, 2180.9 real, 2081.3 MB
_[runlim] sample:		107.7 time, 2190.9 real, 2189.2 MB
_[runlim] sample:		117.7 time, 2200.9 real, 2280.9 MB
_..[runlim] sample:		127.7 time, 2210.9 real, 2457.9 MB
[runlim] sample:		137.6 time, 2220.9 real, 2580.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRLI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 562057343_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1976_32][14_5 := 1073741856_32][15_5 := 32_32][17_5 := 262144_32][4_5 := 1073743800_32][5_5 := 3221225472_32][8_5 := 67108864_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553656447_32
  S1: state_counter = 1_10
  S1: val1 = 16777216_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 83890303_32
  S2: state_counter = 2_10
  S2: val1 = 1140850688_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553652351_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 14962963_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 2_5
  S8: shimm_copy = 14_32
  S8: state_counter = 8_10
  S8: val1 = 1207959552_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 67108992_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 3221225472_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 15893119_32
  S11: state_counter = 11_10
  S11: val1 = 67108866_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 1928463999_32
  S12: state_counter = 12_10
  S12: val1 = 1090519040_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 163967_32
  S13: state_counter = 13_10
  S13: val1 = 335544320_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 106299519_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2097279_32
  S15: state_counter = 15_10
  S15: val1 = 67108864_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1092092031_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 67108864_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 137789567_32
  S18: state_counter = 18_10
  S18: val1 = 67371008_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 687870079_32
  S19: state_counter = 19_10
  S19: val1 = 1140850688_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 67108864_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 20607_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1976_32][14_5 := 1073741856_32][15_5 := 32_32][17_5 := 262144_32][2_5 := 67108878_32][4_5 := 1073743800_32][5_5 := 3221225472_32][8_5 := 67108864_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRLI.vcd
  Test for SRLI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRLI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_JALR.txt
Operator name: JALR
JALRRD
  No bug injection patches found for instruction JALR
JALRRD, skipping tests.
CoSA problem file: ./cosa/single_property_MUL_V3.txt
Operator name: MUL_V3
  No bug injection patches found for instruction MUL_V3, skipping tests.
CoSA problem file: ./cosa/single_property_AUIPC.txt
Operator name: AUIPC
  No bug injection patches found for instruction AUIPC, skipping tests.
CoSA problem file: ./cosa/single_property_SLL.txt
Operator name: SLL
  Bug injection patch file for instruction SLL:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLL.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLL.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		3.0 time, 2230.9 real, 191.2 MB
[runlim] sample:		13.0 time, 2240.9 real, 202.2 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLL" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.6 time, 2250.9 real, 257.1 MB
_[runlim] sample:		13.6 time, 2260.9 real, 524.2 MB
___[runlim] sample:		23.6 time, 2270.9 real, 704.3 MB
___[runlim] sample:		33.6 time, 2280.9 real, 983.1 MB
__[runlim] sample:		43.6 time, 2290.9 real, 1126.2 MB
__[runlim] sample:		53.6 time, 2300.9 real, 1435.4 MB
__[runlim] sample:		63.6 time, 2310.9 real, 1620.7 MB
__[runlim] sample:		73.5 time, 2320.9 real, 1863.2 MB
_[runlim] sample:		83.5 time, 2330.9 real, 1927.0 MB
_[runlim] sample:		93.5 time, 2340.9 real, 2104.1 MB
_[runlim] sample:		103.5 time, 2350.9 real, 2190.7 MB
_[runlim] sample:		113.5 time, 2360.9 real, 2287.7 MB
_..[runlim] sample:		123.5 time, 2370.9 real, 2496.1 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLL **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 591401087_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 268439524_32][12_5 := 1342181376_32][4_5 := 268436480_32][8_5 := 1_32][9_5 := 268435484_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 2149646341_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 1207959552_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 822087807_32
  S3: state_counter = 3_10
  S3: val1 = 134217728_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285216895_32
  S5: state_counter = 5_10
  S5: val1 = 32768_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 9769523_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 4_5
  S8: state_counter = 8_10
  S8: val1 = 1090519040_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 268500994_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 268451840_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 8520063_32
  S11: state_counter = 11_10
  S11: val1 = 268439524_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4261546879_32
  S12: state_counter = 12_10
  S12: val1 = 1342177280_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 17825919_32
  S13: state_counter = 13_10
  S13: val1 = 268439524_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 8388735_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 16777343_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1073938559_32
  S16: state_counter = 16_10
  S16: val1 = 402653184_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 549458047_32
  S18: state_counter = 18_10
  S18: val1 = 536870912_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 2684354560_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 285216895_32
  S20: state_counter = 20_10
  S20: val1 = 268439524_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 4223_32
  S21: shimm2_copy = 28_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 268439524_32][12_5 := 1342181376_32][4_5 := 268439552_32][8_5 := 1_32][9_5 := 268435484_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLL.vcd
[runlim] sample:		133.5 time, 2380.9 real, 2557.9 MB
  Test for SLL using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLL.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLL:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLL.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SLL.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		4.5 time, 2390.9 real, 192.4 MB
[runlim] sample:		14.5 time, 2400.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLL" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		5.1 time, 2410.9 real, 282.8 MB
__[runlim] sample:		15.1 time, 2420.9 real, 533.7 MB
__[runlim] sample:		25.1 time, 2430.9 real, 756.9 MB
___[runlim] sample:		35.1 time, 2440.9 real, 999.5 MB
__[runlim] sample:		45.1 time, 2450.9 real, 1151.0 MB
__[runlim] sample:		55.1 time, 2460.9 real, 1440.8 MB
__[runlim] sample:		65.1 time, 2470.9 real, 1620.3 MB
__[runlim] sample:		75.1 time, 2480.9 real, 1873.1 MB
_[runlim] sample:		85.1 time, 2490.9 real, 2045.0 MB
_[runlim] sample:		95.1 time, 2500.9 real, 2114.6 MB
__[runlim] sample:		105.1 time, 2510.9 real, 2231.7 MB
[runlim] sample:		115.1 time, 2520.9 real, 2290.0 MB
_..[runlim] sample:		125.1 time, 2530.9 real, 2514.8 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLL **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 591401087_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741824_32][1_5 := 67108864_32][5_5 := 1_32][8_5 := 16_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 2162693_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 2155872256_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 2148007936_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 822087807_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285212799_32
  S5: state_counter = 5_10
  S5: val1 = 2415919104_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 12850867_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 268435456_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 134217984_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 134217728_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 15073407_32
  S11: state_counter = 11_10
  S11: val1 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2128776063_32
  S12: state_counter = 12_10
  S12: val1 = 1610612736_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 33554432_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 1081471_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 16_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1084522623_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 16_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 566235263_32
  S18: state_counter = 18_10
  S18: val1 = 541065216_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 67108864_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 16_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 4223_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741824_32][13_5 := 1073741840_32][1_5 := 67108864_32][5_5 := 1_32][8_5 := 16_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLL.vcd
[runlim] sample:		135.1 time, 2540.9 real, 2550.6 MB
  Test for SLL using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLL.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLL:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLL.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLL.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		5.6 time, 2550.9 real, 215.6 MB
[runlim] sample:		15.6 time, 2560.9 real, 202.6 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLL" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		6.1 time, 2570.9 real, 364.6 MB
__[runlim] sample:		16.1 time, 2580.9 real, 545.7 MB
___[runlim] sample:		26.1 time, 2590.9 real, 769.9 MB
__[runlim] sample:		36.1 time, 2600.9 real, 1008.1 MB
___[runlim] sample:		46.1 time, 2610.9 real, 1258.5 MB
__[runlim] sample:		56.1 time, 2620.9 real, 1473.6 MB
__[runlim] sample:		66.1 time, 2630.9 real, 1654.4 MB
_[runlim] sample:		76.1 time, 2640.9 real, 1881.7 MB
__[runlim] sample:		86.0 time, 2650.9 real, 2098.4 MB
_[runlim] sample:		96.0 time, 2660.9 real, 2129.9 MB
_[runlim] sample:		106.0 time, 2670.9 real, 2255.2 MB
_.[runlim] sample:		116.0 time, 2680.9 real, 2298.3 MB
.[runlim] sample:		126.0 time, 2690.9 real, 2514.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLL **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 155193471_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 32_32][12_5 := 32_32][1_5 := 2147483648_32][8_5 := 1082690564_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 150999167_32
  S1: state_counter = 1_10
  S1: val1 = 1048577_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 268435456_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 2097152_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 536870912_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 562040959_32
  S5: state_counter = 5_10
  S5: val1 = 8_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 8656563_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 1207959552_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1610612736_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 11665535_32
  S11: state_counter = 11_10
  S11: val1 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 11929215_32
  S12: state_counter = 12_10
  S12: val1 = 1207959552_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 1114239_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1087930495_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 277876863_32
  S18: state_counter = 18_10
  S18: val1 = 8388608_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 268435456_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 83890303_32
  S20: state_counter = 20_10
  S20: val1 = 1082690564_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 4223_32
  S21: shimm2_copy = 4_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 32_32][12_5 := 32_32][13_5 := 1082690564_32][1_5 := 2147483648_32][8_5 := 1082690564_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLL.vcd
[runlim] sample:		136.0 time, 2700.9 real, 2459.1 MB
  Test for SLL using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLL.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_ANDI.txt
Operator name: ANDI
  Bug injection patch file for instruction ANDI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ANDI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ANDI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		6.9 time, 2710.9 real, 202.4 MB
[runlim] sample:		16.9 time, 2720.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ANDI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		7.0 time, 2730.9 real, 368.9 MB
__[runlim] sample:		17.0 time, 2740.9 real, 559.1 MB
___[runlim] sample:		27.0 time, 2750.9 real, 858.1 MB
__[runlim] sample:		37.0 time, 2760.9 real, 1022.3 MB
___[runlim] sample:		47.0 time, 2770.9 real, 1252.3 MB
__[runlim] sample:		57.0 time, 2780.9 real, 1465.2 MB
__[runlim] sample:		67.0 time, 2790.9 real, 1644.4 MB
_[runlim] sample:		77.0 time, 2800.9 real, 1896.9 MB
_[runlim] sample:		87.0 time, 2810.9 real, 2048.7 MB
_[runlim] sample:		97.0 time, 2820.9 real, 2092.0 MB
__[runlim] sample:		107.0 time, 2830.9 real, 2223.1 MB
_.[runlim] sample:		116.9 time, 2840.9 real, 2301.4 MB
.[runlim] sample:		127.0 time, 2850.9 real, 2527.9 MB
[runlim] sample:		136.9 time, 2860.9 real, 2582.0 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ANDI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 553676927_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 2147483648_32][2_5 := 1073741824_32][3_5 := 2147483648_32][8_5 := 1073741966_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 822087807_32
  S1: state_counter = 1_10
  S1: val1 = 16777216_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553910399_32
  S2: state_counter = 2_10
  S2: val1 = 268435456_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 822349951_32
  S3: state_counter = 3_10
  S3: val1 = 0_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 149188883_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 142_32
  S8: rd_copy = 2_5
  S8: state_counter = 8_10
  S8: val1 = 1610612736_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1074266112_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073758336_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 547782783_32
  S11: state_counter = 11_10
  S11: val1 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 10912255_32
  S12: state_counter = 12_10
  S12: val1 = 1073741960_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 10715263_32
  S14: state_counter = 14_10
  S14: val1 = 1073741966_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2175_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1090617471_32
  S16: state_counter = 16_10
  S16: val1 = 1073741952_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1140850815_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 1413484671_32
  S18: state_counter = 18_10
  S18: val1 = 134217728_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073748095_32
  S19: state_counter = 19_10
  S19: val1 = 1140850688_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 6271_32
  S20: state_counter = 20_10
  S20: val1 = 1073741966_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1090547839_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ANDI.vcd
  Test for ANDI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ANDI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction ANDI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ANDI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ANDI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		1.9 time, 2870.9 real, 130.3 MB
[runlim] sample:		11.9 time, 2880.9 real, 202.6 MB
[runlim] sample:		1.5 time, 2890.9 real, 83.2 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ANDI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		11.5 time, 2900.9 real, 488.6 MB
__[runlim] sample:		21.5 time, 2910.9 real, 692.5 MB
___[runlim] sample:		31.5 time, 2920.9 real, 827.9 MB
__[runlim] sample:		41.5 time, 2930.9 real, 1078.0 MB
___[runlim] sample:		51.4 time, 2940.9 real, 1328.3 MB
_[runlim] sample:		61.4 time, 2950.9 real, 1522.8 MB
__[runlim] sample:		71.4 time, 2960.9 real, 1806.6 MB
__[runlim] sample:		81.4 time, 2970.9 real, 1943.4 MB
_[runlim] sample:		91.4 time, 2980.9 real, 2024.6 MB
_[runlim] sample:		101.4 time, 2990.9 real, 2179.4 MB
_[runlim] sample:		111.4 time, 3000.9 real, 2356.9 MB
_..[runlim] sample:		121.4 time, 3010.9 real, 2639.9 MB
[runlim] sample:		131.4 time, 3020.9 real, 2515.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ANDI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 562065535_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 67108879_32][17_5 := 16777217_32][1_5 := 2164260864_32][25_5 := 2415919104_32][27_5 := 2164260864_32][7_5 := 1_32][9_5 := 2415919104_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553648255_32
  S1: state_counter = 1_10
  S1: val1 = 2164260864_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 268435456_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553652351_32
  S3: state_counter = 3_10
  S3: val1 = 67108864_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1342177280_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 2132210835_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 2033_32
  S8: rd_copy = 9_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 67108992_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1075086463_32
  S11: state_counter = 11_10
  S11: val1 = 67108880_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4280061567_32
  S12: state_counter = 12_10
  S12: val1 = 67108864_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741824_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2164785279_32
  S14: state_counter = 14_10
  S14: val1 = 67108868_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 17006719_32
  S16: state_counter = 16_10
  S16: val1 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 557183_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1140850703_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 67108879_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073770623_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 67108879_32][17_5 := 16777217_32][1_5 := 2164260864_32][25_5 := 2415919104_32][27_5 := 2164260864_32][7_5 := 1_32][9_5 := 67110912_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ANDI.vcd
  Test for ANDI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ANDI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_SUB.txt
Operator name: SUB
  Bug injection patch file for instruction SUB:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SUB.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SUB.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		0.8 time, 3030.9 real, 74.3 MB
[runlim] sample:		10.8 time, 3040.9 real, 203.1 MB
[runlim] sample:		0.8 time, 3050.9 real, 66.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SUB" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		10.8 time, 3060.9 real, 476.2 MB
___[runlim] sample:		20.8 time, 3070.9 real, 651.2 MB
___[runlim] sample:		30.8 time, 3080.9 real, 825.1 MB
__[runlim] sample:		40.8 time, 3090.9 real, 1034.0 MB
__[runlim] sample:		50.8 time, 3100.9 real, 1328.3 MB
__[runlim] sample:		60.8 time, 3110.9 real, 1561.7 MB
__[runlim] sample:		70.8 time, 3120.9 real, 1766.9 MB
__[runlim] sample:		80.8 time, 3130.9 real, 1919.8 MB
_[runlim] sample:		90.8 time, 3140.9 real, 2073.9 MB
_[runlim] sample:		100.8 time, 3150.9 real, 2156.1 MB
_[runlim] sample:		110.8 time, 3160.9 real, 2284.9 MB
_..[runlim] sample:		120.8 time, 3170.9 real, 2429.6 MB
[runlim] sample:		130.8 time, 3180.9 real, 2583.2 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SUB **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 1090523263_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 256_32][11_5 := 16_32][1_5 := 2048_32][4_5 := 4_32][8_5 := 1073741824_32][9_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890303_32
  S1: state_counter = 1_10
  S1: val1 = 1073807393_32
  S1: val2 = 270532613_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 2147483648_32
  S2: val2 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83890303_32
  S3: state_counter = 3_10
  S3: val1 = 2415919104_32
  S3: val2 = 268435456_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 2097152_32
  S4: val2 = 134217728_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285216895_32
  S5: state_counter = 5_10
  S5: val1 = 2147483648_32
  S5: val2 = 33554432_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1075840019_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1083442739_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 12_5
  S8: state_counter = 8_10
  S8: val1 = 1610612736_32
  S8: val2 = 1342177280_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741826_32
  S9: val2 = 1073807360_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1610612736_32
  S10: val2 = 1073741832_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 17072255_32
  S11: state_counter = 11_10
  S11: val1 = 1073872896_32
  S11: val2 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 363391_32
  S12: state_counter = 12_10
  S12: val1 = 1073743872_32
  S12: val2 = 1073745920_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 12583039_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 8519807_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1084784767_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 83890303_32
  S18: state_counter = 18_10
  S18: val1 = 268435456_32
  S18: val2 = 33554432_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 268435456_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 557846655_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32
  S20: val2 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073741951_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 150999167_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 256_32][11_5 := 16_32][12_5 := 1073741824_32][1_5 := 2048_32][4_5 := 4_32][8_5 := 1073741824_32][9_5 := 1073741824_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SUB.vcd
  Test for SUB using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SUB.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SUB:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SUB.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SUB.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.3 time, 3190.9 real, 170.1 MB
[runlim] sample:		12.3 time, 3200.9 real, 202.3 MB
[runlim] sample:		2.5 time, 3210.9 real, 98.5 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SUB" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		12.5 time, 3220.9 real, 493.7 MB
___[runlim] sample:		22.5 time, 3230.9 real, 696.8 MB
__[runlim] sample:		32.5 time, 3240.9 real, 920.4 MB
___[runlim] sample:		42.5 time, 3250.9 real, 1108.6 MB
__[runlim] sample:		52.5 time, 3260.9 real, 1406.4 MB
__[runlim] sample:		62.4 time, 3270.9 real, 1566.0 MB
_[runlim] sample:		72.4 time, 3280.9 real, 1830.9 MB
__[runlim] sample:		82.4 time, 3290.9 real, 1930.1 MB
_[runlim] sample:		92.4 time, 3300.9 real, 2109.8 MB
_[runlim] sample:		102.4 time, 3310.9 real, 2185.0 MB
_[runlim] sample:		112.4 time, 3320.9 real, 2281.5 MB
_..[runlim] sample:		122.4 time, 3330.9 real, 2427.5 MB
[runlim] sample:		132.4 time, 3340.9 real, 2520.1 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SUB **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 1094717567_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[16_5 := 1073741824_32][1_5 := 1610612736_32][4_5 := 1077936128_32][5_5 := 4194304_32][8_5 := 2147483652_32][9_5 := 1610612740_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 536936464_32
  S1: val2 = 2215116805_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 67108864_32
  S2: val2 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 33554432_32
  S3: val2 = 2281701376_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 150999167_32
  S4: state_counter = 4_10
  S4: val1 = 1_32
  S4: val2 = 512_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 83890303_32
  S5: state_counter = 5_10
  S5: val1 = 2147483648_32
  S5: val2 = 536870912_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1083442483_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 10_5
  S8: state_counter = 8_10
  S8: val1 = 1073741824_32
  S8: val2 = 1073741824_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 2147483904_32
  S9: val2 = 1610612768_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1610612736_32
  S10: val2 = 1610612740_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 12877951_32
  S11: state_counter = 11_10
  S11: val1 = 536870912_32
  S11: val2 = 3758096384_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2260895615_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 127_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 25297023_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1090846847_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 286298239_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32
  S18: val2 = 536870912_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652607_32
  S19: state_counter = 19_10
  S19: val1 = 2147483649_32
  S19: val2 = 1610612740_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 83890303_32
  S20: state_counter = 20_10
  S20: val1 = 2147483652_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073741951_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 50335871_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 64_32][16_5 := 1073741824_32][1_5 := 1610612736_32][4_5 := 1077936128_32][5_5 := 4194304_32][8_5 := 2147483652_32][9_5 := 1610612740_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SUB.vcd
  Test for SUB using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SUB.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SUB:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SUB.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SUB.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		0.8 time, 3350.9 real, 92.1 MB
[runlim] sample:		10.8 time, 3360.9 real, 202.9 MB
[runlim] sample:		1.2 time, 3370.9 real, 73.6 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SUB" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		11.2 time, 3380.9 real, 469.6 MB
__[runlim] sample:		21.2 time, 3390.9 real, 689.7 MB
___[runlim] sample:		31.2 time, 3400.9 real, 831.3 MB
__[runlim] sample:		41.1 time, 3410.9 real, 1097.6 MB
__[runlim] sample:		51.1 time, 3420.9 real, 1331.2 MB
__[runlim] sample:		61.1 time, 3430.9 real, 1557.9 MB
__[runlim] sample:		71.1 time, 3440.9 real, 1639.9 MB
_[runlim] sample:		81.1 time, 3450.9 real, 1883.3 MB
__[runlim] sample:		91.1 time, 3460.9 real, 2089.3 MB
_[runlim] sample:		101.1 time, 3470.9 real, 2134.9 MB
_[runlim] sample:		111.1 time, 3480.9 real, 2241.2 MB
_.[runlim] sample:		121.1 time, 3490.9 real, 2302.7 MB
.[runlim] sample:		131.1 time, 3500.9 real, 2529.6 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SUB **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 1090523263_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 32_32][11_5 := 1073741824_32][1_5 := 1610612736_32][24_5 := 1073741824_32][3_5 := 2147483674_32][9_5 := 262144_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 536936464_32
  S1: val2 = 2147549189_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 554709119_32
  S2: state_counter = 2_10
  S2: val1 = 805306368_32
  S2: val2 = 67108864_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 536875135_32
  S3: state_counter = 3_10
  S3: val1 = 67108864_32
  S3: val2 = 536870912_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 822087807_32
  S4: state_counter = 4_10
  S4: val1 = 536870912_32
  S4: val2 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 553652351_32
  S5: state_counter = 5_10
  S5: val1 = 256_32
  S5: val2 = 2684354560_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1083474995_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 8_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32
  S8: val2 = 1073741824_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741856_32
  S9: val2 = 67108864_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32
  S10: val2 = 262144_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 11927679_32
  S11: state_counter = 11_10
  S11: val1 = 262144_32
  S11: val2 = 1074003968_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2124810111_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 2097279_32
  S13: state_counter = 13_10
  S13: val1 = 262144_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2125561983_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 150995071_32
  S15: state_counter = 15_10
  S15: val1 = 262144_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1090814079_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 16777343_32
  S17: state_counter = 17_10
  S17: val1 = 524288_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 562073727_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32
  S18: val2 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1619005567_32
  S19: state_counter = 19_10
  S19: val1 = 1107296256_32
  S19: val2 = 536870912_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 1074008191_32
  S20: state_counter = 20_10
  S20: val1 = 262144_32
  S20: val2 = 262144_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073741951_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 83890303_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 32_32][11_5 := 1073741824_32][1_5 := 1610612736_32][24_5 := 1073741824_32][3_5 := 2147483674_32][8_5 := 524288_32][9_5 := 262144_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SUB.vcd
[runlim] sample:		141.1 time, 3510.9 real, 2558.4 MB
  Test for SUB using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SUB.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_MUL_V4.txt
Operator name: MUL_V4
  No bug injection patches found for instruction MUL_V4, skipping tests.
CoSA problem file: ./cosa/single_property_JAL.txt
Operator name: JALPC
JALRD
  No bug injection patches found for instruction JALPC
JALRD, skipping tests.
CoSA problem file: ./cosa/single_property_XOR.txt
Operator name: XOR
  Bug injection patch file for instruction XOR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_XOR.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_XOR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		5.3 time, 3520.9 real, 215.3 MB
[runlim] sample:		15.3 time, 3530.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for XOR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		6.1 time, 3540.9 real, 364.3 MB
__[runlim] sample:		16.1 time, 3550.9 real, 543.8 MB
___[runlim] sample:		26.1 time, 3560.9 real, 767.4 MB
__[runlim] sample:		36.1 time, 3570.9 real, 1022.6 MB
___[runlim] sample:		46.1 time, 3580.9 real, 1236.5 MB
__[runlim] sample:		56.1 time, 3590.9 real, 1458.4 MB
_[runlim] sample:		66.1 time, 3600.9 real, 1618.8 MB
__[runlim] sample:		76.1 time, 3610.9 real, 1852.4 MB
_[runlim] sample:		86.1 time, 3620.9 real, 2048.8 MB
_[runlim] sample:		96.1 time, 3630.9 real, 2107.8 MB
_[runlim] sample:		106.1 time, 3640.9 real, 2210.5 MB
__[runlim] sample:		116.1 time, 3650.9 real, 2335.3 MB
..[runlim] sample:		126.1 time, 3660.9 real, 2514.9 MB
[runlim] sample:		136.1 time, 3670.9 real, 2582.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for XOR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285233279_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 1074266116_32][11_5 := 16_32][12_5 := 524292_32][13_5 := 1074266116_32][14_5 := 16_32][1_5 := 524288_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 822087807_32
  S1: state_counter = 1_10
  S1: val1 = 2097409_32
  S1: val2 = 67108869_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32
  S2: val2 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 1073741824_32
  S3: val2 = 268435456_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 268435456_32
  S4: val2 = 67108864_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 536875135_32
  S5: state_counter = 5_10
  S5: val1 = 67108864_32
  S5: val2 = 2147483648_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 10830899_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 8_5
  S8: state_counter = 8_10
  S8: val1 = 1140850688_32
  S8: val2 = 1342177280_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1074790401_32
  S9: val2 = 131072_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1074266117_32
  S10: val2 = 0_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 16187519_32
  S11: state_counter = 11_10
  S11: val1 = 0_32
  S11: val2 = 1074266128_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2125924095_32
  S12: state_counter = 12_10
  S12: val1 = 3221225472_32
  S12: val2 = 1074266112_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 2097279_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 524288_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 9601151_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4718719_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1080426623_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 562434175_32
  S18: state_counter = 18_10
  S18: val1 = 2097152_32
  S18: val2 = 134217728_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 536870912_32
  S19: val2 = 2147483648_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 285216895_32
  S20: state_counter = 20_10
  S20: val1 = 1074266116_32
  S20: val2 = 1074266116_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 16511_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 1074266116_32][11_5 := 16_32][12_5 := 524292_32][13_5 := 1074266116_32][14_5 := 16_32][1_5 := 524288_32][8_5 := 1074266116_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for XOR.vcd
  Test for XOR using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_XOR.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction XOR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_00_XOR.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_XOR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		1.7 time, 3680.9 real, 128.6 MB
[runlim] sample:		11.7 time, 3690.9 real, 201.8 MB
[runlim] sample:		1.7 time, 3700.9 real, 83.7 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for XOR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		11.7 time, 3710.9 real, 492.6 MB
___[runlim] sample:		21.7 time, 3720.9 real, 694.6 MB
__[runlim] sample:		31.7 time, 3730.9 real, 844.2 MB
___[runlim] sample:		41.7 time, 3740.9 real, 1118.9 MB
__[runlim] sample:		51.7 time, 3750.9 real, 1362.5 MB
__[runlim] sample:		61.7 time, 3760.9 real, 1593.7 MB
_[runlim] sample:		71.7 time, 3770.9 real, 1836.3 MB
__[runlim] sample:		81.7 time, 3780.9 real, 1928.8 MB
_[runlim] sample:		91.7 time, 3790.9 real, 2064.2 MB
_[runlim] sample:		101.6 time, 3800.9 real, 2178.4 MB
_[runlim] sample:		111.6 time, 3810.9 real, 2284.7 MB
_..[runlim] sample:		121.6 time, 3820.9 real, 2494.0 MB
[runlim] sample:		131.6 time, 3830.9 real, 2576.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for XOR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 151015551_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 32_32][12_5 := 16_32][13_5 := 524288_32][1_5 := 1073741824_32][25_5 := 67107840_32][8_5 := 268959744_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890303_32
  S1: state_counter = 1_10
  S1: val1 = 2149581057_32
  S1: val2 = 1140850689_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 4194304_32
  S2: val2 = 268435456_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32
  S3: val2 = 134217728_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 1140850688_32
  S4: val2 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285216895_32
  S5: state_counter = 5_10
  S5: val1 = 2147483648_32
  S5: val2 = 268435456_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 13911731_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 1073741824_32
  S8: val2 = 3221225472_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 268959744_32
  S9: val2 = 524290_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32
  S10: val2 = 1342177280_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 11796607_32
  S11: state_counter = 11_10
  S11: val1 = 268959744_32
  S11: val2 = 524289_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2125860223_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 524288_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 16777343_32
  S13: state_counter = 13_10
  S13: val1 = 268959744_32
  S13: val2 = 67108864_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 1074561151_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 16777343_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1074036863_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 262271_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 542380287_32
  S18: state_counter = 18_10
  S18: val2 = 536870912_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1627656447_32
  S19: state_counter = 19_10
  S19: val1 = 1073741824_32
  S19: val2 = 655360_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 83890431_32
  S20: state_counter = 20_10
  S20: val1 = 268959744_32
  S20: val2 = 524288_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 16793727_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 32_32][12_5 := 16_32][13_5 := 268959744_32][1_5 := 1073741824_32][25_5 := 67107840_32][8_5 := 268959744_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for XOR.vcd
  Test for XOR using ./testing-workflow/bug-injection-patches/alu-bug-injected_00_XOR.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction XOR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_XOR.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_XOR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		3.8 time, 3840.9 real, 192.2 MB
[runlim] sample:		13.8 time, 3850.9 real, 202.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for XOR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.4 time, 3860.9 real, 223.0 MB
_[runlim] sample:		13.4 time, 3870.9 real, 484.9 MB
___[runlim] sample:		23.4 time, 3880.9 real, 704.6 MB
___[runlim] sample:		33.4 time, 3890.9 real, 977.1 MB
__[runlim] sample:		43.4 time, 3900.9 real, 1126.0 MB
__[runlim] sample:		53.4 time, 3910.9 real, 1392.3 MB
__[runlim] sample:		63.3 time, 3920.9 real, 1622.8 MB
_[runlim] sample:		73.3 time, 3930.9 real, 1832.5 MB
__[runlim] sample:		83.3 time, 3940.9 real, 1928.9 MB
_[runlim] sample:		93.3 time, 3950.9 real, 2074.9 MB
_[runlim] sample:		103.3 time, 3960.9 real, 2188.1 MB
_[runlim] sample:		113.3 time, 3970.9 real, 2279.6 MB
_..[runlim] sample:		123.3 time, 3980.9 real, 2491.2 MB
[runlim] sample:		133.3 time, 3990.9 real, 2578.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for XOR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 555765887_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 16_32][1_5 := 4096_32][2_5 := 1073741824_32][4_5 := 1_32][5_5 := 1073741825_32][9_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 67108864_32
  S1: val2 = 134225925_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 83890303_32
  S2: state_counter = 2_10
  S2: val1 = 134217728_32
  S2: val2 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553652351_32
  S3: state_counter = 3_10
  S3: val1 = 1342177280_32
  S3: val2 = 1073741824_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553717887_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32
  S4: val2 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285278335_32
  S5: state_counter = 5_10
  S5: val1 = 2147483648_32
  S5: val2 = 33554432_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 2409523_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 8_5
  S8: state_counter = 8_10
  S8: val1 = 1610612736_32
  S8: val2 = 536870912_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073758209_32
  S9: val2 = 1075838976_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 4325503_32
  S11: state_counter = 11_10
  S11: val1 = 0_32
  S11: val2 = 3221225472_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4274129919_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 11141247_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 127_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1082294399_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 553914495_32
  S18: state_counter = 18_10
  S18: val1 = 134217728_32
  S18: val2 = 2147483648_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 562040959_32
  S19: state_counter = 19_10
  S19: val1 = 268435456_32
  S19: val2 = 4194304_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 92278911_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32
  S20: val2 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 17318015_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 151523455_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 16_32][1_5 := 4096_32][2_5 := 1073741824_32][4_5 := 1_32][5_5 := 1073741825_32][8_5 := 1073741824_32][9_5 := 1073741824_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for XOR.vcd
  Test for XOR using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_XOR.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction XOR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_XOR.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_XOR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.5 time, 4000.9 real, 190.9 MB
[runlim] sample:		12.5 time, 4010.9 real, 202.0 MB
[runlim] sample:		2.8 time, 4020.9 real, 99.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for XOR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		12.8 time, 4030.9 real, 493.5 MB
___[runlim] sample:		22.8 time, 4040.9 real, 694.2 MB
__[runlim] sample:		32.8 time, 4050.9 real, 844.9 MB
___[runlim] sample:		42.8 time, 4060.9 real, 1119.1 MB
__[runlim] sample:		52.7 time, 4070.9 real, 1353.6 MB
__[runlim] sample:		62.7 time, 4080.9 real, 1588.2 MB
_[runlim] sample:		72.7 time, 4090.9 real, 1828.5 MB
__[runlim] sample:		82.7 time, 4100.9 real, 1915.8 MB
_[runlim] sample:		92.7 time, 4110.9 real, 2098.7 MB
_[runlim] sample:		102.7 time, 4120.9 real, 2198.7 MB
_[runlim] sample:		112.7 time, 4130.9 real, 2280.6 MB
_..[runlim] sample:		122.7 time, 4140.9 real, 2515.0 MB
[runlim] sample:		132.7 time, 4150.9 real, 2581.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for XOR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 88100991_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 16_32][15_5 := 1073741840_32][3_5 := 134217728_32][5_5 := 1073742336_32][6_5 := 1073742320_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890815_32
  S1: state_counter = 1_10
  S1: val1 = 2415984673_32
  S1: val2 = 2105408_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 2147483648_32
  S2: val2 = 1073741824_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553783423_32
  S3: state_counter = 3_10
  S3: val1 = 2415919104_32
  S3: val2 = 67108864_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 285347967_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32
  S4: val2 = 1207959552_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 553783423_32
  S5: state_counter = 5_10
  S5: val1 = 3221225472_32
  S5: val2 = 1610612736_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 15942323_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 5_5
  S8: state_counter = 8_10
  S8: val1 = 1077936128_32
  S8: val2 = 1140850688_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073742321_32
  S9: val2 = 1090519041_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 0_32
  S10: val2 = 1073758208_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 11960447_32
  S11: state_counter = 11_10
  S11: val1 = 1073742322_32
  S11: val2 = 3221225472_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2124843135_32
  S12: state_counter = 12_10
  S12: val1 = 1073742320_32
  S12: val2 = 1073741840_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 11829375_32
  S14: state_counter = 14_10
  S14: val1 = 1610612736_32
  S14: val2 = 1073741840_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1077575807_32
  S16: state_counter = 16_10
  S16: val1 = 1073742304_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 568332415_32
  S18: state_counter = 18_10
  S18: val1 = 1342177280_32
  S18: val2 = 2147483648_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 822087807_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 1073742320_32
  S20: val2 = 1073741840_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 16511_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 16_32][15_5 := 1073741840_32][3_5 := 134217728_32][5_5 := 2147484160_32][6_5 := 1073742320_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for XOR.vcd
  Test for XOR using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_XOR.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_SRAI.txt
Operator name: SRAI
  Bug injection patch file for instruction SRAI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRAI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRAI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.9 time, 4160.9 real, 190.9 MB
[runlim] sample:		12.9 time, 4170.9 real, 202.9 MB
[runlim] sample:		2.6 time, 4180.9 real, 97.5 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRAI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		12.6 time, 4190.9 real, 494.9 MB
___[runlim] sample:		22.6 time, 4200.9 real, 702.0 MB
__[runlim] sample:		32.6 time, 4210.9 real, 966.9 MB
___[runlim] sample:		42.6 time, 4220.9 real, 1126.5 MB
__[runlim] sample:		52.6 time, 4230.9 real, 1414.3 MB
__[runlim] sample:		62.6 time, 4240.9 real, 1594.7 MB
_[runlim] sample:		72.6 time, 4250.9 real, 1844.8 MB
__[runlim] sample:		82.6 time, 4260.9 real, 1909.1 MB
_[runlim] sample:		92.6 time, 4270.9 real, 2091.4 MB
_[runlim] sample:		102.6 time, 4280.9 real, 2287.8 MB
_[runlim] sample:		112.6 time, 4290.9 real, 2297.4 MB
_..[runlim] sample:		122.6 time, 4300.9 real, 2515.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRAI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 101449855_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 1073741824_32][15_5 := 67108864_32][1_5 := 1048576_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 268988543_32
  S1: state_counter = 1_10
  S1: val1 = 8201_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 67115135_32
  S2: state_counter = 2_10
  S2: val1 = 3221225472_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83892351_32
  S3: state_counter = 3_10
  S3: val1 = 1073741824_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 537399423_32
  S4: state_counter = 4_10
  S4: val1 = 1610612736_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 268959871_32
  S5: state_counter = 5_10
  S5: val1 = 536870912_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1089918099_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 9_5
  S8: shimm_copy = 15_32
  S8: state_counter = 8_10
  S8: val1 = 1082130432_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741824_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 0_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 26214527_32
  S11: state_counter = 11_10
  S11: val1 = 1090519040_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2123369983_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 10944639_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2097279_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 127_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1048703_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 1099957375_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 127_32
  S19: state_counter = 19_10
  S19: val1 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 537399423_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073762431_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 268963967_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRAI.vcd
[runlim] sample:		132.6 time, 4310.9 real, 2438.6 MB
  Test for SRAI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRAI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SRAI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRAI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRAI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		7.2 time, 4320.9 real, 203.5 MB
[runlim] sample:		17.1 time, 4330.9 real, 203.5 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRAI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		6.9 time, 4340.9 real, 366.4 MB
__[runlim] sample:		16.9 time, 4350.9 real, 548.6 MB
__[runlim] sample:		26.9 time, 4360.9 real, 756.5 MB
___[runlim] sample:		36.9 time, 4370.9 real, 1004.1 MB
__[runlim] sample:		46.9 time, 4380.9 real, 1125.5 MB
__[runlim] sample:		56.9 time, 4390.9 real, 1434.9 MB
__[runlim] sample:		66.9 time, 4400.9 real, 1619.3 MB
_[runlim] sample:		76.9 time, 4410.9 real, 1854.9 MB
__[runlim] sample:		86.9 time, 4420.9 real, 1918.1 MB
_[runlim] sample:		96.9 time, 4430.9 real, 2101.8 MB
_[runlim] sample:		106.9 time, 4440.9 real, 2148.2 MB
_[runlim] sample:		116.9 time, 4450.9 real, 2300.4 MB
_..[runlim] sample:		126.9 time, 4460.9 real, 2550.7 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRAI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 68702335_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 16777216_32][15_5 := 2147483648_32][1_5 := 3221225472_32][5_5 := 128_32][8_5 := 512_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 134770815_32
  S1: state_counter = 1_10

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 67637375_32
  S2: state_counter = 2_10
  S2: val1 = 134217728_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 134223999_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 67637375_32
  S4: state_counter = 4_10
  S4: val1 = 2214592512_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 603980927_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1082131507_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1089753619_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 4_5
  S8: shimm_copy = 15_32
  S8: state_counter = 8_10
  S8: val1 = 1073741824_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 2147483648_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1207959552_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 15761535_32
  S11: state_counter = 11_10
  S11: val1 = 2097152_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 1189249919_32
  S12: state_counter = 12_10
  S12: val1 = 65536_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 268435456_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 10616959_32
  S14: state_counter = 14_10
  S14: val1 = 1090519040_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1048703_32
  S15: state_counter = 15_10
  S15: val1 = 513_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4279402623_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 512_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 19300479_32
  S18: state_counter = 18_10
  S18: val1 = 268435456_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073741824_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 512_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073762431_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 537399423_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 16777216_32][15_5 := 2147483648_32][1_5 := 3221225472_32][4_5 := 16777216_32][5_5 := 128_32][8_5 := 512_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRAI.vcd
[runlim] sample:		136.9 time, 4470.9 real, 2564.1 MB
  Test for SRAI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRAI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_ADDI.txt
Operator name: ADDI
  Bug injection patch file for instruction ADDI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ADDI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ADDI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		4.9 time, 4480.9 real, 192.6 MB
[runlim] sample:		14.9 time, 4490.9 real, 202.5 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ADDI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		4.9 time, 4500.9 real, 278.8 MB
__[runlim] sample:		14.9 time, 4510.9 real, 540.5 MB
__[runlim] sample:		24.9 time, 4520.9 real, 756.3 MB
___[runlim] sample:		34.9 time, 4530.9 real, 978.2 MB
__[runlim] sample:		44.9 time, 4540.9 real, 1164.2 MB
__[runlim] sample:		54.9 time, 4550.9 real, 1443.6 MB
__[runlim] sample:		64.9 time, 4560.9 real, 1626.1 MB
__[runlim] sample:		74.9 time, 4570.9 real, 1839.6 MB
_[runlim] sample:		84.9 time, 4580.9 real, 2044.5 MB
_[runlim] sample:		94.9 time, 4590.9 real, 2084.1 MB
__[runlim] sample:		104.9 time, 4600.9 real, 2239.1 MB
_.[runlim] sample:		114.9 time, 4610.9 real, 2299.2 MB
.[runlim] sample:		124.9 time, 4620.9 real, 2515.1 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ADDI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 562036863_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 1073741842_32][1_5 := 1024_32][26_5 := 16_32][9_5 := 1_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 1208221712_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 4194304_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83890303_32
  S3: state_counter = 3_10
  S3: val1 = 1073741824_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1082131507_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 4277438355_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 134217728_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 4294967279_32
  S8: rd_copy = 15_5
  S8: state_counter = 8_10
  S8: val1 = 1342177280_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 3221241856_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 3221225472_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 4522623_32
  S11: state_counter = 11_10
  S11: val1 = 4096_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 34409343_32
  S12: state_counter = 12_10
  S12: val1 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 8388735_32
  S13: state_counter = 13_10
  S13: val1 = 536870912_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2119696511_32
  S14: state_counter = 14_10
  S14: val1 = 3221225472_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1074823295_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 293605503_32
  S18: state_counter = 18_10
  S18: val1 = 268435456_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 67108864_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 1_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073746047_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 285220991_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 18_32][1_5 := 1024_32][26_5 := 16_32][9_5 := 1_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ADDI.vcd
[runlim] sample:		134.9 time, 4630.9 real, 2074.1 MB
  Test for ADDI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ADDI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction ADDI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_ADDI.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_ADDI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		8.8 time, 4640.9 real, 202.1 MB
[runlim] sample:		18.8 time, 4650.9 real, 275.6 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ADDI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		9.0 time, 4660.9 real, 368.3 MB
___[runlim] sample:		19.0 time, 4670.9 real, 627.2 MB
__[runlim] sample:		29.0 time, 4680.9 real, 828.4 MB
___[runlim] sample:		39.0 time, 4690.9 real, 1036.4 MB
__[runlim] sample:		49.0 time, 4700.9 real, 1210.8 MB
__[runlim] sample:		59.0 time, 4710.9 real, 1466.8 MB
__[runlim] sample:		69.0 time, 4720.9 real, 1646.0 MB
_[runlim] sample:		79.0 time, 4730.9 real, 1876.2 MB
_[runlim] sample:		89.0 time, 4740.9 real, 2056.7 MB
__[runlim] sample:		99.0 time, 4750.9 real, 2124.3 MB
_[runlim] sample:		109.0 time, 4760.9 real, 2235.8 MB
_.[runlim] sample:		119.0 time, 4770.9 real, 2324.2 MB
.[runlim] sample:		129.0 time, 4780.9 real, 2527.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ADDI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 419430527_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 1073741824_32][15_5 := 262144_32][16_5 := 2048_32][29_5 := 2147481856_32][3_5 := 1073741824_32][4_5 := 2147483648_32][9_5 := 2147483648_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 2415919173_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 289411199_32
  S2: state_counter = 2_10
  S2: val1 = 1342177280_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 557846655_32
  S3: state_counter = 3_10
  S3: val1 = 2148007936_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 285216895_32
  S4: state_counter = 4_10
  S4: val1 = 4194304_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1074005119_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1082131507_32
  S6: state_counter = 6_10
  S6: val1 = 3221225472_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 4294291_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1342177280_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 4_32
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 1073741824_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 0_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 2155905151_32
  S11: state_counter = 11_10
  S11: val1 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 9931775_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 17039487_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2024702079_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 127_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1090551935_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 549490815_32
  S18: state_counter = 18_10
  S18: val1 = 1048576_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 142606336_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073741951_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 262144_32][16_5 := 2048_32][29_5 := 2147481856_32][3_5 := 1073741824_32][4_5 := 2147483648_32][9_5 := 2147483648_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ADDI.vcd
[runlim] sample:		139.0 time, 4790.9 real, 1993.9 MB
  Test for ADDI using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_ADDI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction ADDI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ADDI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ADDI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		8.6 time, 4800.9 real, 203.3 MB
[runlim] sample:		18.6 time, 4810.9 real, 275.8 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ADDI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		9.1 time, 4820.9 real, 368.7 MB
___[runlim] sample:		19.1 time, 4830.9 real, 611.0 MB
__[runlim] sample:		29.1 time, 4840.9 real, 805.7 MB
___[runlim] sample:		39.0 time, 4850.9 real, 1036.4 MB
__[runlim] sample:		49.0 time, 4860.9 real, 1264.5 MB
__[runlim] sample:		59.0 time, 4870.9 real, 1458.8 MB
_[runlim] sample:		69.0 time, 4880.9 real, 1615.5 MB
__[runlim] sample:		79.0 time, 4890.9 real, 1867.4 MB
_[runlim] sample:		89.0 time, 4900.9 real, 1926.8 MB
_[runlim] sample:		99.0 time, 4910.9 real, 2109.0 MB
_[runlim] sample:		109.0 time, 4920.9 real, 2188.6 MB
_[runlim] sample:		119.0 time, 4930.9 real, 2286.4 MB
_..[runlim] sample:		129.0 time, 4940.9 real, 2496.1 MB
[runlim] sample:		139.0 time, 4950.9 real, 2581.2 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ADDI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 553648255_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 16_32][15_5 := 128_32][1_5 := 2097152_32][9_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 16778240_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 554696831_32
  S2: state_counter = 2_10
  S2: val1 = 1073741824_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 8388608_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 3221225472_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 83134099_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 79_32
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741824_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1610612736_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 551551103_32
  S11: state_counter = 11_10
  S11: val1 = 1074003968_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 48367615_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073741951_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 10879103_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1048703_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1074790527_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 72355967_32
  S18: state_counter = 18_10
  S18: val1 = 268435456_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 822087807_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073741951_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ADDI.vcd
  Test for ADDI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ADDI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_BGEU.txt
Operator name: BGEU
  No bug injection patches found for instruction BGEU, skipping tests.
CoSA problem file: ./cosa/single_property_BGE.txt
Operator name: BGE
  No bug injection patches found for instruction BGE, skipping tests.
CoSA problem file: ./cosa/single_property_SLTIU.txt
Operator name: SLTIU
  Bug injection patch file for instruction SLTIU:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLTIU.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLTIU.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		3.7 time, 4960.9 real, 192.6 MB
[runlim] sample:		13.7 time, 4970.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTIU" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		4.3 time, 4980.9 real, 270.2 MB
_[runlim] sample:		14.3 time, 4990.9 real, 529.3 MB
___[runlim] sample:		24.3 time, 5000.9 real, 712.5 MB
___[runlim] sample:		34.3 time, 5010.9 real, 999.9 MB
__[runlim] sample:		44.3 time, 5020.9 real, 1139.6 MB
__[runlim] sample:		54.3 time, 5030.9 real, 1359.7 MB
__[runlim] sample:		64.3 time, 5040.9 real, 1580.9 MB
_[runlim] sample:		74.3 time, 5050.9 real, 1841.5 MB
_[runlim] sample:		84.3 time, 5060.9 real, 1881.5 MB
__[runlim] sample:		94.3 time, 5070.9 real, 2110.8 MB
_[runlim] sample:		104.3 time, 5080.9 real, 2285.4 MB
_[runlim] sample:		114.3 time, 5090.9 real, 2283.8 MB
_..[runlim] sample:		124.3 time, 5100.9 real, 2461.3 MB
[runlim] sample:		134.3 time, 5110.9 real, 2582.2 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTIU **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 553660543_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 1073741824_32][11_5 := 16_32][12_5 := 67108864_32][1_5 := 2147483648_32][5_5 := 1073741824_32][8_5 := 4_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 1073745920_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 822087807_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285343871_32
  S3: state_counter = 3_10
  S3: val1 = 603979776_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1151_32
  S4: state_counter = 4_10
  S4: val1 = 0_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1074791551_32
  S5: state_counter = 5_10
  S5: val1 = 1342177280_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1074791475_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1079260819_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 134217728_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 1029_32
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 1207959552_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 4096_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1207959552_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 3571839_32
  S11: state_counter = 11_10
  S11: val1 = 1048576_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2125890559_32
  S12: state_counter = 12_10
  S12: val1 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 8192_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 127_32
  S14: state_counter = 14_10
  S14: val1 = 0_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 25165951_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 10879103_32
  S16: state_counter = 16_10
  S16: val1 = 4_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 536870912_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 1099957375_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 127_32
  S19: state_counter = 19_10
  S19: val1 = 16777216_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 4_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073754239_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTIU.vcd
  Test for SLTIU using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLTIU.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLTIU:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLTIU.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SLTIU.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		3.1 time, 5120.9 real, 191.4 MB
[runlim] sample:		13.1 time, 5130.9 real, 202.3 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTIU" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		4.0 time, 5140.9 real, 262.5 MB
_[runlim] sample:		14.0 time, 5150.9 real, 541.2 MB
___[runlim] sample:		24.0 time, 5160.9 real, 705.0 MB
___[runlim] sample:		34.0 time, 5170.9 real, 977.0 MB
__[runlim] sample:		44.0 time, 5180.9 real, 1131.6 MB
__[runlim] sample:		54.0 time, 5190.9 real, 1406.6 MB
__[runlim] sample:		64.0 time, 5200.9 real, 1578.2 MB
_[runlim] sample:		74.0 time, 5210.9 real, 1830.6 MB
__[runlim] sample:		84.0 time, 5220.9 real, 1917.0 MB
_[runlim] sample:		94.0 time, 5230.9 real, 2061.7 MB
_[runlim] sample:		104.0 time, 5240.9 real, 2186.0 MB
_[runlim] sample:		113.9 time, 5250.9 real, 2289.5 MB
_..[runlim] sample:		123.9 time, 5260.9 real, 2456.2 MB
[runlim] sample:		133.9 time, 5270.9 real, 2589.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTIU **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 285225087_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 2147483648_32][2_5 := 2147483648_32][8_5 := 16_32][9_5 := 1073741840_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 150999167_32
  S1: state_counter = 1_10
  S1: val1 = 16842757_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 83890303_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 150999167_32
  S3: state_counter = 3_10
  S3: val1 = 1073741824_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 536870912_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 150999167_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1082131507_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 2163487891_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 4294965263_32
  S8: rd_copy = 9_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 4096_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1107296256_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 12583039_32
  S11: state_counter = 11_10
  S11: val1 = 24_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 1620052863_32
  S12: state_counter = 12_10
  S12: val1 = 33554432_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 131199_32
  S13: state_counter = 13_10

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 10649727_32
  S14: state_counter = 14_10
  S14: val1 = 1140850688_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2147483775_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1093664895_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 541069439_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 83890303_32
  S19: state_counter = 19_10
  S19: val1 = 33554432_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 620761215_32
  S20: state_counter = 20_10
  S20: val1 = 16_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073754239_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 2147483648_32][2_5 := 2147483648_32][8_5 := 16_32][9_5 := 4294965279_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTIU.vcd
  Test for SLTIU using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLTIU.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLTIU:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLTIU.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLTIU.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		3.8 time, 5280.9 real, 192.2 MB
[runlim] sample:		13.8 time, 5290.9 real, 201.9 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTIU" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		4.7 time, 5300.9 real, 277.8 MB
__[runlim] sample:		14.7 time, 5310.9 real, 551.0 MB
__[runlim] sample:		24.7 time, 5320.9 real, 755.6 MB
___[runlim] sample:		34.7 time, 5330.9 real, 1011.8 MB
__[runlim] sample:		44.7 time, 5340.9 real, 1159.6 MB
__[runlim] sample:		54.7 time, 5350.9 real, 1440.2 MB
__[runlim] sample:		64.7 time, 5360.9 real, 1620.1 MB
__[runlim] sample:		74.7 time, 5370.9 real, 1860.6 MB
_[runlim] sample:		84.7 time, 5380.9 real, 1981.6 MB
_[runlim] sample:		94.7 time, 5390.9 real, 2085.5 MB
_[runlim] sample:		104.7 time, 5400.9 real, 2256.2 MB
_[runlim] sample:		114.7 time, 5410.9 real, 2282.1 MB
_..[runlim] sample:		124.7 time, 5420.9 real, 2413.6 MB
[runlim] sample:		134.7 time, 5430.9 real, 2537.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTIU **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 554184831_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 1048586_32][15_5 := 1048586_32][16_5 := 1073741824_32][1_5 := 2147483648_32][26_5 := 32_32][31_5 := 268435456_32][8_5 := 32_32][9_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 537423999_32
  S1: state_counter = 1_10
  S1: val1 = 268443648_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 541593727_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 138940543_32
  S3: state_counter = 3_10
  S3: val1 = 67108864_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 268441727_32
  S4: state_counter = 4_10
  S4: val1 = 536870912_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1074005119_32
  S5: state_counter = 5_10
  S5: val1 = 1075838976_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 2464462739_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 4294965550_32
  S8: rd_copy = 15_5
  S8: state_counter = 8_10
  S8: val1 = 3758096384_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1610645504_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1610612736_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 2424959_32
  S11: state_counter = 11_10
  S11: val1 = 1074790400_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4228712575_32
  S12: state_counter = 12_10
  S12: val1 = 1073743872_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 16777343_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 4273209471_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4294836351_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 8388735_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 127_32
  S18: state_counter = 18_10
  S18: val1 = 3221225472_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1140850688_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073754239_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 536877183_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 1048586_32][16_5 := 1073741824_32][1_5 := 2147483648_32][26_5 := 32_32][31_5 := 268435456_32][8_5 := 32_32][9_5 := 1073741824_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTIU.vcd
  Test for SLTIU using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLTIU.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_LUI.txt
Operator name: LUI
  No bug injection patches found for instruction LUI, skipping tests.
CoSA problem file: ./cosa/single_property_SRA.txt
Operator name: SRA
  Bug injection patch file for instruction SRA:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRA.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRA.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.2 time, 5440.9 real, 170.1 MB
[runlim] sample:		12.2 time, 5450.9 real, 203.3 MB
[runlim] sample:		2.0 time, 5460.9 real, 86.7 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRA" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		12.0 time, 5470.9 real, 485.6 MB
___[runlim] sample:		22.0 time, 5480.9 real, 694.2 MB
__[runlim] sample:		32.0 time, 5490.9 real, 901.8 MB
___[runlim] sample:		42.0 time, 5500.9 real, 1089.8 MB
__[runlim] sample:		52.0 time, 5510.9 real, 1331.9 MB
__[runlim] sample:		62.0 time, 5520.9 real, 1537.7 MB
_[runlim] sample:		72.0 time, 5530.9 real, 1804.7 MB
__[runlim] sample:		82.0 time, 5540.9 real, 1997.5 MB
_[runlim] sample:		92.0 time, 5550.9 real, 2041.9 MB
_[runlim] sample:		102.0 time, 5560.9 real, 2191.5 MB
_[runlim] sample:		112.0 time, 5570.9 real, 2350.3 MB
_.[runlim] sample:		122.0 time, 5580.9 real, 2422.3 MB
.[runlim] sample:		131.9 time, 5590.9 real, 2589.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRA **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 1073764479_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741838_32][16_5 := 1048576_32][17_5 := 524288_32][1_5 := 262144_32][8_5 := 512_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 134248575_32
  S1: state_counter = 1_10
  S1: val1 = 268435968_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 537399423_32
  S2: state_counter = 2_10
  S2: val1 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 545788031_32
  S3: state_counter = 3_10
  S3: val1 = 16777216_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 562565247_32
  S4: state_counter = 4_10
  S4: val1 = 1342177280_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 33558579_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1086608563_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 9_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741824_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 528_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1074922623_32
  S11: state_counter = 11_10
  S11: val1 = 1073741824_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2165443455_32
  S12: state_counter = 12_10
  S12: val1 = 513_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741824_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 16777343_32
  S14: state_counter = 14_10
  S14: val1 = 513_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 16810111_32
  S16: state_counter = 16_10
  S16: val1 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 295039_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073742336_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 512_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073762431_32
  S21: shimm2_copy = 14_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 134746239_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741838_32][16_5 := 1048576_32][17_5 := 524288_32][1_5 := 262144_32][8_5 := 512_32][9_5 := 8388608_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRA.vcd
  Test for SRA using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SRA.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SRA:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRA.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SRA.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.1 time, 5600.9 real, 169.7 MB
[runlim] sample:		12.1 time, 5610.9 real, 203.0 MB
[runlim] sample:		2.5 time, 5620.9 real, 96.7 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRA" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		12.5 time, 5630.9 real, 495.3 MB
___[runlim] sample:		22.4 time, 5640.9 real, 700.6 MB
__[runlim] sample:		32.5 time, 5650.9 real, 926.7 MB
___[runlim] sample:		42.4 time, 5660.9 real, 1092.2 MB
__[runlim] sample:		52.4 time, 5670.9 real, 1341.5 MB
__[runlim] sample:		62.4 time, 5680.9 real, 1548.5 MB
_[runlim] sample:		72.4 time, 5690.9 real, 1800.2 MB
__[runlim] sample:		82.4 time, 5700.9 real, 1996.8 MB
_[runlim] sample:		92.4 time, 5710.9 real, 2148.7 MB
_[runlim] sample:		102.4 time, 5720.9 real, 2179.3 MB
_[runlim] sample:		112.4 time, 5730.9 real, 2282.1 MB
_..[runlim] sample:		122.4 time, 5740.9 real, 2522.5 MB
[runlim] sample:		132.4 time, 5750.9 real, 2581.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRA **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 1074278527_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741836_32][16_5 := 128_32][17_5 := 1073741952_32][1_5 := 8388608_32][8_5 := 4128_32][9_5 := 2147483649_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 536901759_32
  S1: state_counter = 1_10
  S1: val1 = 1073741824_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 538447999_32
  S2: state_counter = 2_10
  S2: val1 = 134217728_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 268963967_32
  S3: state_counter = 3_10
  S3: val1 = 536870912_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1074791551_32
  S4: state_counter = 4_10
  S4: val1 = 2048_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073743872_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 33554483_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1086607539_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1107304448_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741824_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 4130_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1073775743_32
  S11: state_counter = 11_10
  S11: val1 = 1073741824_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2164295551_32
  S12: state_counter = 12_10
  S12: val1 = 4128_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1074791551_32
  S13: state_counter = 13_10
  S13: val1 = 1073741824_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 3146623_32
  S14: state_counter = 14_10
  S14: val1 = 4128_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1090520191_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 18120831_32
  S16: state_counter = 16_10
  S16: val1 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 426111_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073745952_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 4128_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1610633343_32
  S21: shimm2_copy = 12_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 537399423_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741836_32][16_5 := 128_32][17_5 := 1073741952_32][1_5 := 16908288_32][8_5 := 4128_32][9_5 := 2147483649_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRA.vcd
  Test for SRA using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SRA.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SRA:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SRA.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SRA.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.7 time, 5760.9 real, 191.7 MB
[runlim] sample:		12.7 time, 5770.9 real, 203.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SRA" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.4 time, 5780.9 real, 209.7 MB
_[runlim] sample:		13.4 time, 5790.9 real, 522.0 MB
___[runlim] sample:		23.3 time, 5800.9 real, 707.8 MB
___[runlim] sample:		33.4 time, 5810.9 real, 982.8 MB
__[runlim] sample:		43.4 time, 5820.9 real, 1122.7 MB
__[runlim] sample:		53.3 time, 5830.9 real, 1476.0 MB
__[runlim] sample:		63.3 time, 5840.9 real, 1620.6 MB
__[runlim] sample:		73.3 time, 5850.9 real, 1864.6 MB
_[runlim] sample:		83.3 time, 5860.9 real, 1910.4 MB
_[runlim] sample:		93.3 time, 5870.9 real, 2104.2 MB
_[runlim] sample:		103.3 time, 5880.9 real, 2162.3 MB
_[runlim] sample:		113.3 time, 5890.9 real, 2281.1 MB
_..[runlim] sample:		123.3 time, 5900.9 real, 2499.2 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SRA **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 270028927_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: shimm2_copy = 0_32
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 16_32][16_5 := 1_32][1_5 := 3216965636_32][25_5 := 1_32][8_5 := 528482305_32][9_5 := 4290707460_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 268963967_32
  S1: state_counter = 1_10
  S1: val1 = 2164523008_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 537399423_32
  S2: state_counter = 2_10
  S2: val1 = 4_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 268959871_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 134223999_32
  S4: state_counter = 4_10
  S4: val1 = 65536_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 536877183_32
  S5: state_counter = 5_10
  S5: val1 = 67108864_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 805307411_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1082184883_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 9_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 3216998400_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 3216965636_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 12910719_32
  S11: state_counter = 11_10
  S11: val1 = 67108864_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 13962111_32
  S12: state_counter = 12_10
  S12: val1 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 536871039_32
  S13: state_counter = 13_10
  S13: val1 = 536870912_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 819327_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2097279_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1094811775_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 537432191_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 545788031_32
  S19: state_counter = 19_10
  S19: val1 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 277352575_32
  S20: state_counter = 20_10
  S20: val1 = 3216965636_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073762431_32
  S21: shimm2_copy = 1_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 268963967_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 16_32][16_5 := 1_32][1_5 := 3216965636_32][25_5 := 1_32][8_5 := 528482305_32][9_5 := 2688483331_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SRA.vcd
[runlim] sample:		133.3 time, 5910.9 real, 2555.3 MB
  Test for SRA using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SRA.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_LOADx0.txt
Operator name: LOADx0
  No bug injection patches found for instruction LOADx0, skipping tests.
CoSA problem file: ./cosa/single_property_LW.txt
Operator name: LW
  No bug injection patches found for instruction LW, skipping tests.
CoSA problem file: ./cosa/single_property_SLTU.txt
Operator name: SLTU
  Bug injection patch file for instruction SLTU:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLTU.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLTU.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		4.3 time, 5920.9 real, 192.5 MB
[runlim] sample:		14.3 time, 5930.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTU" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		4.0 time, 5940.9 real, 263.9 MB
__[runlim] sample:		14.0 time, 5950.9 real, 518.8 MB
__[runlim] sample:		24.0 time, 5960.9 real, 745.2 MB
___[runlim] sample:		34.0 time, 5970.9 real, 979.9 MB
__[runlim] sample:		44.0 time, 5980.9 real, 1120.4 MB
__[runlim] sample:		54.0 time, 5990.9 real, 1439.7 MB
__[runlim] sample:		64.0 time, 6000.9 real, 1621.1 MB
__[runlim] sample:		74.0 time, 6010.9 real, 1873.9 MB
_[runlim] sample:		84.0 time, 6020.9 real, 2045.7 MB
_[runlim] sample:		94.0 time, 6030.9 real, 2085.4 MB
_[runlim] sample:		104.0 time, 6040.9 real, 2300.0 MB
_[runlim] sample:		114.0 time, 6050.9 real, 2289.5 MB
_..[runlim] sample:		124.0 time, 6060.9 real, 2493.3 MB
[runlim] sample:		134.0 time, 6070.9 real, 2578.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTU **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285225087_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 16_32][12_5 := 100864_32][15_5 := 1073741824_32][2_5 := 8192_32][8_5 := 1073807360_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83891327_32
  S1: state_counter = 1_10
  S1: val1 = 2097409_32
  S1: val2 = 1_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 1207959552_32
  S2: val2 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553652351_32
  S3: state_counter = 3_10
  S3: val1 = 268435456_32
  S3: val2 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 285216895_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32
  S4: val2 = 1140850688_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 553653375_32
  S5: state_counter = 5_10
  S5: val1 = 268435456_32
  S5: val2 = 2147483648_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 16003251_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 1879048192_32
  S8: val2 = 2097152_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073807368_32
  S9: val2 = 1073741828_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1207959552_32
  S10: val2 = 1610612736_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 393343_32
  S11: state_counter = 11_10
  S11: val1 = 1075838976_32
  S11: val2 = 1107296256_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 1052118143_32
  S12: state_counter = 12_10
  S12: val1 = 1073807368_32
  S12: val2 = 1073742336_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 16777343_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 10911871_32
  S14: state_counter = 14_10
  S14: val1 = 1073807362_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2097279_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 83886207_32
  S16: state_counter = 16_10
  S16: val1 = 1073807360_32
  S16: val2 = 1073741825_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 1076921471_32
  S18: state_counter = 18_10
  S18: val1 = 1073807360_32
  S18: val2 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 127_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 16781439_32
  S20: state_counter = 20_10
  S20: val1 = 1073807360_32
  S20: val2 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 12415_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 16_32][12_5 := 100864_32][15_5 := 1073741824_32][1_5 := 1_32][2_5 := 8192_32][8_5 := 1073807360_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTU.vcd
  Test for SLTU using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLTU.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLTU:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLTU.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLTU.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.6 time, 6080.9 real, 191.1 MB
[runlim] sample:		12.5 time, 6090.9 real, 202.1 MB
[runlim] sample:		2.7 time, 6100.9 real, 98.9 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTU" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		12.7 time, 6110.9 real, 495.4 MB
___[runlim] sample:		22.7 time, 6120.9 real, 704.2 MB
__[runlim] sample:		32.7 time, 6130.9 real, 956.0 MB
___[runlim] sample:		42.7 time, 6140.9 real, 1101.3 MB
__[runlim] sample:		52.7 time, 6150.9 real, 1342.2 MB
__[runlim] sample:		62.7 time, 6160.9 real, 1547.5 MB
_[runlim] sample:		72.7 time, 6170.9 real, 1798.7 MB
__[runlim] sample:		82.7 time, 6180.9 real, 1996.1 MB
_[runlim] sample:		92.6 time, 6190.9 real, 2155.5 MB
_[runlim] sample:		102.6 time, 6200.9 real, 2180.7 MB
_[runlim] sample:		112.6 time, 6210.9 real, 2384.9 MB
_..[runlim] sample:		122.6 time, 6220.9 real, 2509.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTU **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 545796223_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 4089272521_32][13_5 := 4089272523_32][17_5 := 262144_32][1_5 := 128_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 537399423_32
  S1: state_counter = 1_10
  S1: val1 = 2164260864_32
  S1: val2 = 2147614720_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 268963967_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32
  S2: val2 = 16777216_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285741183_32
  S3: state_counter = 3_10
  S3: val1 = 545259520_32
  S3: val2 = 939524096_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 536877183_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32
  S4: val2 = 536870912_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 2281701376_32
  S5: val2 = 3221225472_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 19_32
  S6: state_counter = 6_10
  S6: val1 = 0_32
  S6: val2 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 13022387_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1107296256_32
  S7: val2 = 3221225472_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 9_5
  S8: state_counter = 8_10
  S8: val1 = 64_32
  S8: val2 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32
  S9: val2 = 1090519040_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 4088922112_32
  S10: val2 = 4087349856_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1343259775_32
  S11: state_counter = 11_10
  S11: val1 = 1074003968_32
  S11: val2 = 4087349320_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 990940415_32
  S12: state_counter = 12_10
  S12: val1 = 536870912_32
  S12: val2 = 268435520_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1207959552_32
  S13: val2 = 1342177280_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 16777343_32
  S14: state_counter = 14_10
  S14: val1 = 1090519040_32
  S14: val2 = 134217728_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073742975_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32
  S15: val2 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4283695231_32
  S16: state_counter = 16_10
  S16: val1 = 1048576_32
  S16: val2 = 2155872256_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073742975_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32
  S17: val2 = 2441084928_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 127_32
  S18: state_counter = 18_10
  S18: val1 = 65536_32
  S18: val2 = 3288334336_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073807372_32
  S19: val2 = 3551330316_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 8388735_32
  S20: state_counter = 20_10
  S20: val1 = 4089272523_32
  S20: val2 = 4089272521_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 12415_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 528511_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 4089272521_32][13_5 := 4089272523_32][17_5 := 262144_32][1_5 := 128_32][9_5 := 1_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTU.vcd
[runlim] sample:		132.6 time, 6230.9 real, 2558.4 MB
  Test for SLTU using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLTU.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLTU:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLTU.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SLTU.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		5.1 time, 6240.9 real, 192.4 MB
[runlim] sample:		15.0 time, 6250.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTU" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		5.3 time, 6260.9 real, 281.9 MB
__[runlim] sample:		15.2 time, 6270.9 real, 525.7 MB
__[runlim] sample:		25.2 time, 6280.9 real, 757.5 MB
___[runlim] sample:		35.2 time, 6290.9 real, 1005.5 MB
__[runlim] sample:		45.2 time, 6300.9 real, 1169.4 MB
__[runlim] sample:		55.2 time, 6310.9 real, 1443.2 MB
__[runlim] sample:		65.2 time, 6320.9 real, 1621.3 MB
__[runlim] sample:		75.2 time, 6330.9 real, 1872.7 MB
_[runlim] sample:		85.2 time, 6340.9 real, 2040.6 MB
_[runlim] sample:		95.2 time, 6350.9 real, 2077.5 MB
_[runlim] sample:		105.2 time, 6360.9 real, 2209.3 MB
_[runlim] sample:		115.2 time, 6370.9 real, 2292.1 MB
_..[runlim] sample:		125.2 time, 6380.9 real, 2494.0 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTU **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285225087_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[17_5 := 1073741952_32][1_5 := 1073774593_32][3_5 := 1073741992_32][4_5 := 4_32][9_5 := 1_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83891327_32
  S1: state_counter = 1_10
  S1: val1 = 1075839233_32
  S1: val2 = 1_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553653375_32
  S2: state_counter = 2_10
  S2: val1 = 67108864_32
  S2: val2 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 536876159_32
  S3: state_counter = 3_10
  S3: val1 = 1073741824_32
  S3: val2 = 268435456_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 151000191_32
  S4: state_counter = 4_10
  S4: val1 = 33554432_32
  S4: val2 = 1075838976_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285217919_32
  S5: state_counter = 5_10
  S5: val1 = 67108864_32
  S5: val2 = 167772160_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 100663296_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1356979_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 9_5
  S8: state_counter = 8_10
  S8: val1 = 1342177280_32
  S8: val2 = 1342177280_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 40_32
  S9: val2 = 1073872896_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 8_32
  S10: val2 = 1073774594_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 13631615_32
  S11: state_counter = 11_10
  S11: val1 = 2_32
  S11: val2 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2123369343_32
  S12: state_counter = 12_10
  S12: val1 = 4_32
  S12: val2 = 1073774592_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 127_32
  S13: state_counter = 13_10
  S13: val1 = 1090519040_32
  S13: val2 = 67108864_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 10617215_32
  S14: state_counter = 14_10
  S14: val1 = 1342177280_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1048703_32
  S15: state_counter = 15_10
  S15: val1 = 1_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1086587007_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 1_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 72618111_32
  S18: state_counter = 18_10
  S18: val1 = 67108864_32
  S18: val2 = 2147483648_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 2147483648_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 956307583_32
  S20: state_counter = 20_10
  S20: val1 = 1_32
  S20: val2 = 1073774593_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 134232191_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 83890303_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[17_5 := 1073741952_32][1_5 := 1073774593_32][3_5 := 1073741992_32][4_5 := 4_32][9_5 := 1073774592_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTU.vcd
[runlim] sample:		135.2 time, 6390.9 real, 2439.2 MB
  Test for SLTU using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLTU.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_SW.txt
Operator name: SW
  No bug injection patches found for instruction SW, skipping tests.
CoSA problem file: ./cosa/single_property_SLT.txt
Operator name: SLT
  Bug injection patch file for instruction SLT:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLT.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLT.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		6.3 time, 6400.9 real, 202.8 MB
[runlim] sample:		16.3 time, 6410.9 real, 202.8 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLT" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		6.2 time, 6420.9 real, 283.3 MB
__[runlim] sample:		16.1 time, 6430.9 real, 549.4 MB
__[runlim] sample:		26.1 time, 6440.9 real, 791.1 MB
___[runlim] sample:		36.1 time, 6450.9 real, 974.1 MB
__[runlim] sample:		46.1 time, 6460.9 real, 1119.3 MB
__[runlim] sample:		56.1 time, 6470.9 real, 1440.0 MB
__[runlim] sample:		66.1 time, 6480.9 real, 1642.7 MB
__[runlim] sample:		76.1 time, 6490.9 real, 1841.6 MB
_[runlim] sample:		86.1 time, 6500.9 real, 2008.2 MB
__[runlim] sample:		96.1 time, 6510.9 real, 2174.8 MB
_[runlim] sample:		106.1 time, 6520.9 real, 2243.2 MB
_..[runlim] sample:		116.1 time, 6530.9 real, 2477.2 MB
[runlim] sample:		126.1 time, 6540.9 real, 2581.1 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLT **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 536881279_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741824_32][24_5 := 129_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 805337215_32
  S1: state_counter = 1_10
  S1: val1 = 134217856_32
  S1: val2 = 2147483648_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 537396351_32
  S2: state_counter = 2_10
  S2: val1 = 4194304_32
  S2: val2 = 1073741824_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 553654399_32
  S3: state_counter = 3_10
  S3: val1 = 536870912_32
  S3: val2 = 536870912_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1610613887_32
  S4: state_counter = 4_10
  S4: val1 = 1610612736_32
  S4: val2 = 3221225472_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32
  S5: val2 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 33554483_32
  S6: state_counter = 6_10
  S6: val1 = 0_32
  S6: val2 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 12854323_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32
  S7: val2 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 8_5
  S8: state_counter = 8_10
  S8: val1 = 0_32
  S8: val2 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741824_32
  S9: val2 = 1090519040_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 65536_32
  S10: val2 = 1610874880_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1082393727_32
  S11: state_counter = 11_10
  S11: val1 = 1073741824_32
  S11: val2 = 1074074688_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 25431679_32
  S12: state_counter = 12_10
  S12: val1 = 0_32
  S12: val2 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741824_32
  S13: val2 = 1073741824_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 895_32
  S14: state_counter = 14_10
  S14: val1 = 0_32
  S14: val2 = 0_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073743487_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32
  S15: val2 = 1073743872_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4286579583_32
  S16: state_counter = 16_10
  S16: val1 = 0_32
  S16: val2 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 3238003839_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32
  S17: val2 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 4270850175_32
  S18: state_counter = 18_10
  S18: val1 = 16777216_32
  S18: val2 = 4194304_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val2 = 4_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 4294966399_32
  S20: state_counter = 20_10
  S20: val1 = 0_32
  S20: val2 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073742975_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 127_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLT.vcd
  Test for SLT using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLT.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLT:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLT.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLT.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		1.8 time, 6550.9 real, 128.9 MB
[runlim] sample:		11.8 time, 6560.9 real, 202.2 MB
[runlim] sample:		2.1 time, 6570.9 real, 85.8 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLT" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		12.1 time, 6580.9 real, 492.6 MB
___[runlim] sample:		22.1 time, 6590.9 real, 687.8 MB
__[runlim] sample:		32.1 time, 6600.9 real, 844.3 MB
__[runlim] sample:		42.1 time, 6610.9 real, 1094.0 MB
___[runlim] sample:		52.1 time, 6620.9 real, 1342.0 MB
_[runlim] sample:		62.0 time, 6630.9 real, 1568.6 MB
__[runlim] sample:		72.1 time, 6640.9 real, 1790.3 MB
_[runlim] sample:		82.0 time, 6650.9 real, 1886.2 MB
__[runlim] sample:		92.0 time, 6660.9 real, 2103.6 MB
_[runlim] sample:		102.0 time, 6670.9 real, 2274.1 MB
_[runlim] sample:		112.0 time, 6680.9 real, 2291.1 MB
_..[runlim] sample:		122.0 time, 6690.9 real, 2511.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLT **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 286273663_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[15_5 := 16_32][1_5 := 16_32][5_5 := 16_32][8_5 := 2147483648_32][9_5 := 32768_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 1074790433_32
  S1: val2 = 1210187792_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553653375_32
  S2: state_counter = 2_10
  S2: val1 = 0_32
  S2: val2 = 1_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32
  S3: val2 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 16777216_32
  S4: val2 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 557846655_32
  S5: state_counter = 5_10
  S5: val1 = 2147483648_32
  S5: val2 = 2147483648_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 12854963_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32
  S8: val2 = 1610612736_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 2147483652_32
  S9: val2 = 0_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32
  S10: val2 = 3221225472_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 3309695_32
  S11: state_counter = 11_10
  S11: val1 = 2147483648_32
  S11: val2 = 256_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2129824127_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 268435583_32
  S13: state_counter = 13_10
  S13: val1 = 2147483648_32
  S13: val2 = 536870912_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 1181311_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 0_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 2147483648_32
  S15: val2 = 268435456_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4271767679_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1140850688_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 8388735_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 536870912_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 262271_32
  S18: state_counter = 18_10
  S18: val1 = 3221225472_32
  S18: val2 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073741824_32
  S19: val2 = 134217728_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 2147483648_32
  S20: val2 = 0_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 67119231_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 150999167_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLT.vcd
[runlim] sample:		132.0 time, 6700.9 real, 2430.8 MB
  Test for SLT using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLT.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLT:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLT.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SLT.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		7.0 time, 6710.9 real, 203.0 MB
[runlim] sample:		17.0 time, 6720.9 real, 203.0 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLT" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		7.8 time, 6730.9 real, 368.8 MB
___[runlim] sample:		17.7 time, 6740.9 real, 619.4 MB
__[runlim] sample:		27.7 time, 6750.9 real, 821.8 MB
___[runlim] sample:		37.7 time, 6760.9 real, 1031.6 MB
__[runlim] sample:		47.7 time, 6770.9 real, 1277.8 MB
__[runlim] sample:		57.7 time, 6780.9 real, 1494.6 MB
__[runlim] sample:		67.7 time, 6790.9 real, 1642.8 MB
_[runlim] sample:		77.7 time, 6800.9 real, 1888.1 MB
__[runlim] sample:		87.7 time, 6810.9 real, 2141.9 MB
_[runlim] sample:		97.7 time, 6820.9 real, 2184.9 MB
_[runlim] sample:		107.7 time, 6830.9 real, 2281.3 MB
_..[runlim] sample:		117.7 time, 6840.9 real, 2493.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLT **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 151007359_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073749512_32][14_5 := 16_32][16_5 := 1073741824_32][8_5 := 1073749504_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890303_32
  S1: state_counter = 1_10
  S1: val1 = 2149581057_32
  S1: val2 = 67108865_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 268435456_32
  S2: val2 = 268435456_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 2147483648_32
  S3: val2 = 33554432_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 67108864_32
  S4: val2 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 83886207_32
  S5: state_counter = 5_10
  S5: val1 = 268435456_32
  S5: val2 = 33554432_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 0_32
  S6: val2 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 12855219_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1075838976_32
  S7: val2 = 3758096384_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 15_5
  S8: state_counter = 8_10
  S8: val1 = 1610612736_32
  S8: val2 = 1610612736_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073749512_32
  S9: val2 = 1073749512_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1140850688_32
  S10: val2 = 536870912_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 10846335_32
  S11: state_counter = 11_10
  S11: val1 = 1073749504_32
  S11: val2 = 1073807360_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 1994754943_32
  S12: state_counter = 12_10
  S12: val1 = 0_32
  S12: val2 = 1073749512_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 33554559_32
  S13: state_counter = 13_10
  S13: val1 = 536870912_32
  S13: val2 = 33554432_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 37781631_32
  S14: state_counter = 14_10
  S14: val1 = 1610612736_32
  S14: val2 = 1073749512_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 33554559_32
  S15: state_counter = 15_10
  S15: val1 = 1073741856_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1092059263_32
  S16: state_counter = 16_10
  S16: val1 = 1073758208_32
  S16: val2 = 1610612736_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 562036863_32
  S18: state_counter = 18_10
  S18: val1 = 2147483648_32
  S18: val2 = 134217728_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 83890303_32
  S19: state_counter = 19_10
  S19: val1 = 1140850688_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 285216895_32
  S20: state_counter = 20_10
  S20: val1 = 1073749504_32
  S20: val2 = 1073749512_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 8319_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 285216895_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073749512_32][14_5 := 16_32][15_5 := 8_32][16_5 := 1073741824_32][8_5 := 1073749504_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLT.vcd
[runlim] sample:		127.7 time, 6850.9 real, 2436.9 MB
  Test for SLT using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLT.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_BNE.txt
Operator name: BNE
  No bug injection patches found for instruction BNE, skipping tests.
CoSA problem file: ./cosa/single_property_OR.txt
Operator name: OR
  Bug injection patch file for instruction OR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_OR.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_OR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		6.5 time, 6860.9 real, 202.1 MB
[runlim] sample:		16.5 time, 6870.9 real, 202.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction For OR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		7.2 time, 6880.9 real, 368.4 MB
__[runlim] sample:		17.2 time, 6890.9 real, 592.7 MB
___[runlim] sample:		27.2 time, 6900.9 real, 793.0 MB
___[runlim] sample:		37.2 time, 6910.9 real, 1029.9 MB
__[runlim] sample:		47.2 time, 6920.9 real, 1254.9 MB
__[runlim] sample:		57.2 time, 6930.9 real, 1472.3 MB
__[runlim] sample:		67.2 time, 6940.9 real, 1661.7 MB
_[runlim] sample:		77.2 time, 6950.9 real, 1819.9 MB
__[runlim] sample:		87.2 time, 6960.9 real, 2119.1 MB
_[runlim] sample:		97.2 time, 6970.9 real, 2155.3 MB
_[runlim] sample:		107.2 time, 6980.9 real, 2289.9 MB
_..[runlim] sample:		117.2 time, 6990.9 real, 2457.6 MB
[runlim] sample:		127.2 time, 7000.9 real, 2550.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction For OR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285241471_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 11864349_32][12_5 := 1073747144_32][14_5 := 16_32][1_5 := 67108880_32][2_5 := 2147483648_32][4_5 := 131072_32][8_5 := 11864341_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83891327_32
  S1: state_counter = 1_10
  S1: val1 = 2097409_32
  S1: val2 = 536870913_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 151000191_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32
  S2: val2 = 1073741824_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83891327_32
  S3: state_counter = 3_10
  S3: val1 = 134217728_32
  S3: val2 = 536870912_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 151000191_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32
  S4: val2 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 553653375_32
  S5: state_counter = 5_10
  S5: val1 = 134217728_32
  S5: val2 = 1610612736_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 12936883_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32
  S8: val2 = 269484032_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 11864064_32
  S9: val2 = 1073744002_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741824_32
  S10: val2 = 1073741825_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 31621503_32
  S11: state_counter = 11_10
  S11: val1 = 11864348_32
  S11: val2 = 1073745920_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2128776063_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 20971647_32
  S13: state_counter = 13_10
  S13: val1 = 67108864_32
  S13: val2 = 2048_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 8421503_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073747144_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 262271_32
  S15: state_counter = 15_10
  S15: val1 = 11864340_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1078231167_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073747144_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 297799807_32
  S18: state_counter = 18_10
  S18: val1 = 2147483648_32
  S18: val2 = 1342177280_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 545259520_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 822087807_32
  S20: state_counter = 20_10
  S20: val1 = 11864349_32
  S20: val2 = 1073747144_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 67133567_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 83890303_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 11864349_32][12_5 := 1073747144_32][13_5 := 1085611477_32][14_5 := 16_32][1_5 := 67108880_32][2_5 := 2147483648_32][4_5 := 131072_32][8_5 := 11864341_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction For OR.vcd
  Test for OR using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_OR.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction OR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_OR.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_OR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.5 time, 7010.9 real, 191.2 MB
[runlim] sample:		12.5 time, 7020.9 real, 202.2 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction For OR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.3 time, 7030.9 real, 174.2 MB
_[runlim] sample:		13.3 time, 7040.9 real, 498.0 MB
___[runlim] sample:		23.3 time, 7050.9 real, 706.1 MB
___[runlim] sample:		33.3 time, 7060.9 real, 976.7 MB
__[runlim] sample:		43.3 time, 7070.9 real, 1121.6 MB
__[runlim] sample:		53.3 time, 7080.9 real, 1431.4 MB
__[runlim] sample:		63.3 time, 7090.9 real, 1623.6 MB
__[runlim] sample:		73.3 time, 7100.9 real, 1851.7 MB
_[runlim] sample:		83.3 time, 7110.9 real, 1929.7 MB
_[runlim] sample:		93.3 time, 7120.9 real, 2072.1 MB
_[runlim] sample:		103.3 time, 7130.9 real, 2190.4 MB
_[runlim] sample:		113.2 time, 7140.9 real, 2317.9 MB
_..[runlim] sample:		123.2 time, 7150.9 real, 2515.0 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction For OR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285241471_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 512_32][14_5 := 32_32][1_5 := 1073741824_32][4_5 := 4_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83891327_32
  S1: state_counter = 1_10
  S1: val1 = 2097409_32
  S1: val2 = 536870913_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553653375_32
  S2: state_counter = 2_10
  S2: val1 = 2147483648_32
  S2: val2 = 1342177280_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83891327_32
  S3: state_counter = 3_10
  S3: val1 = 524288_32
  S3: val2 = 1375731712_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 285216895_32
  S4: state_counter = 4_10
  S4: val1 = 33554432_32
  S4: val2 = 536870912_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 83890303_32
  S5: state_counter = 5_10
  S5: val1 = 34078720_32
  S5: val2 = 8388608_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1077936128_32
  S6: val2 = 3221225472_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 10608819_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073774592_32
  S7: val2 = 1140850688_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 1073741824_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 128_32
  S9: val2 = 512_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1140850688_32
  S10: val2 = 1342177280_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 10748031_32
  S11: state_counter = 11_10
  S11: val1 = 0_32
  S11: val2 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4239852671_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 2097279_32
  S13: state_counter = 13_10
  S13: val1 = 33587200_32
  S13: val2 = 512_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 17959295_32
  S14: state_counter = 14_10
  S14: val1 = 1107296256_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 33587327_32
  S15: state_counter = 15_10
  S15: val1 = 32_32
  S15: val2 = 512_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1092288639_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 524288_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 542380159_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32
  S18: val2 = 2281701376_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 2_32
  S19: val2 = 2147483648_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 554176639_32
  S20: state_counter = 20_10
  S20: val1 = 0_32
  S20: val2 = 512_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 554197119_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 512_32][14_5 := 32_32][4_5 := 4_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction For OR.vcd
[runlim] sample:		133.2 time, 7160.9 real, 2437.1 MB
  Test for OR using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_OR.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction OR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_OR.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_OR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		7.6 time, 7170.9 real, 202.3 MB
[runlim] sample:		17.6 time, 7180.9 real, 262.6 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction For OR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		8.3 time, 7190.9 real, 368.3 MB
___[runlim] sample:		18.3 time, 7200.9 real, 629.4 MB
__[runlim] sample:		28.3 time, 7210.9 real, 821.8 MB
___[runlim] sample:		38.3 time, 7220.9 real, 1032.7 MB
__[runlim] sample:		48.3 time, 7230.9 real, 1284.3 MB
__[runlim] sample:		58.3 time, 7240.9 real, 1540.0 MB
__[runlim] sample:		68.3 time, 7250.9 real, 1639.1 MB
_[runlim] sample:		78.3 time, 7260.9 real, 1823.4 MB
__[runlim] sample:		88.3 time, 7270.9 real, 2088.1 MB
_[runlim] sample:		98.3 time, 7280.9 real, 2117.9 MB
_[runlim] sample:		108.3 time, 7290.9 real, 2226.2 MB
_..[runlim] sample:		118.3 time, 7300.9 real, 2422.4 MB
[runlim] sample:		128.3 time, 7310.9 real, 2518.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction For OR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 553677439_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 16_32][13_5 := 4194312_32][14_5 := 1073741832_32][15_5 := 8_32][1_5 := 2147483648_32][24_5 := 1073741824_32][4_5 := 32_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 822087807_32
  S1: state_counter = 1_10
  S1: val1 = 2097409_32
  S1: val2 = 16389_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 2147483648_32
  S2: val2 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83890303_32
  S3: state_counter = 3_10
  S3: val1 = 536870912_32
  S3: val2 = 1610612736_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 285216895_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32
  S4: val2 = 8388608_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 83890303_32
  S5: state_counter = 5_10
  S5: val1 = 2281701377_32
  S5: val2 = 2147483649_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 15132595_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 15_5
  S8: state_counter = 8_10
  S8: val1 = 1342177280_32
  S8: val2 = 3221225472_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 4194313_32
  S9: val2 = 1207959552_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1342177280_32
  S10: val2 = 1073741833_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 13893759_32
  S11: state_counter = 11_10
  S11: val1 = 4210688_32
  S11: val2 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 11930495_32
  S12: state_counter = 12_10
  S12: val1 = 4194304_32
  S12: val2 = 1074266112_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1048703_32
  S13: state_counter = 13_10
  S13: val1 = 4194312_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2124546175_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741832_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1049215_32
  S15: state_counter = 15_10
  S15: val1 = 4194312_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1082916991_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741832_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 285380735_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32
  S18: val2 = 536870912_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 822612095_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553652351_32
  S20: state_counter = 20_10
  S20: val1 = 4194312_32
  S20: val2 = 1073741832_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 24703_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 83890303_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 16_32][13_5 := 4194312_32][14_5 := 1073741832_32][15_5 := 1077936128_32][1_5 := 2147483648_32][24_5 := 1073741824_32][4_5 := 32_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction For OR.vcd
  Test for OR using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_OR.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction OR:  ./testing-workflow/bug-injection-patches/alu-bug-injected_00_OR.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_OR.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		0.6 time, 7320.9 real, 74.7 MB
[runlim] sample:		10.6 time, 7330.9 real, 202.4 MB
[runlim] sample:		1.5 time, 7340.9 real, 83.2 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction For OR" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		11.4 time, 7350.9 real, 486.9 MB
___[runlim] sample:		21.4 time, 7360.9 real, 685.9 MB
__[runlim] sample:		31.4 time, 7370.9 real, 895.8 MB
___[runlim] sample:		41.4 time, 7380.9 real, 1128.4 MB
__[runlim] sample:		51.4 time, 7390.9 real, 1368.2 MB
__[runlim] sample:		61.4 time, 7400.9 real, 1565.9 MB
_[runlim] sample:		71.4 time, 7410.9 real, 1829.9 MB
__[runlim] sample:		81.4 time, 7420.9 real, 1936.6 MB
_[runlim] sample:		91.4 time, 7430.9 real, 2077.6 MB
__[runlim] sample:		101.4 time, 7440.9 real, 2241.9 MB
_.[runlim] sample:		111.4 time, 7450.9 real, 2289.5 MB
.[runlim] sample:		121.4 time, 7460.9 real, 2529.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction For OR **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285241471_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 16_32][11_5 := 2048_32][12_5 := 1073741824_32][2_5 := 2147483648_32][8_5 := 2147483648_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83891327_32
  S1: state_counter = 1_10
  S1: val1 = 538972417_32
  S1: val2 = 536870913_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553653375_32
  S2: state_counter = 2_10
  S2: val1 = 8392704_32
  S2: val2 = 33558528_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 33558528_32
  S3: val2 = 1073745920_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 2147487744_32
  S4: val2 = 1149243392_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 17535_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32
  S5: val2 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073759251_32
  S6: state_counter = 6_10
  S6: val1 = 0_32
  S6: val2 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 12870707_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1610612736_32
  S7: val2 = 1077936128_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 8_5
  S8: state_counter = 8_10
  S8: val1 = 1073741824_32
  S8: val2 = 1073774592_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1208025088_32
  S9: val2 = 1073741824_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1207959552_32
  S10: val2 = 3221225472_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 19333247_32
  S11: state_counter = 11_10
  S11: val1 = 2147483648_32
  S11: val2 = 1073741888_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 10946303_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 553648255_32
  S13: state_counter = 13_10
  S13: val1 = 2147483648_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 163967_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 67108864_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 2147483648_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1085571199_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 2147549184_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 566235263_32
  S18: state_counter = 18_10
  S18: val1 = 134217728_32
  S18: val2 = 67108864_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 1075838976_32
  S19: val2 = 268435456_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 687870079_32
  S20: state_counter = 20_10
  S20: val1 = 2147483648_32
  S20: val2 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 536895615_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 16_32][11_5 := 2048_32][12_5 := 1073741824_32][2_5 := 2147483648_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction For OR.vcd
[runlim] sample:		131.4 time, 7470.9 real, 2435.4 MB
  Test for OR using ./testing-workflow/bug-injection-patches/alu-bug-injected_00_OR.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_XORI.txt
Operator name: XORI
  Bug injection patch file for instruction XORI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_XORI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_XORI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		7.5 time, 7480.9 real, 202.3 MB
[runlim] sample:		17.5 time, 7490.9 real, 263.9 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for XORI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		8.3 time, 7500.9 real, 368.6 MB
___[runlim] sample:		18.3 time, 7510.9 real, 607.2 MB
__[runlim] sample:		28.3 time, 7520.9 real, 838.5 MB
___[runlim] sample:		38.3 time, 7530.9 real, 1047.2 MB
__[runlim] sample:		48.3 time, 7540.9 real, 1224.4 MB
__[runlim] sample:		58.3 time, 7550.9 real, 1450.2 MB
__[runlim] sample:		68.3 time, 7560.9 real, 1650.1 MB
_[runlim] sample:		78.3 time, 7570.9 real, 1885.3 MB
__[runlim] sample:		88.3 time, 7580.9 real, 2070.9 MB
_[runlim] sample:		98.3 time, 7590.9 real, 2191.4 MB
_[runlim] sample:		108.3 time, 7600.9 real, 2282.7 MB
_..[runlim] sample:		118.3 time, 7610.9 real, 2496.9 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for XORI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 553664639_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 2048_32][16_5 := 8_32][21_5 := 2147483648_32][5_5 := 16_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 1610612736_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 554700927_32
  S3: state_counter = 3_10
  S3: val1 = 536870912_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 66687_32
  S4: state_counter = 4_10
  S4: val1 = 0_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073808511_32
  S5: state_counter = 5_10
  S5: val1 = 3221225472_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1082131507_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 22202003_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 134217728_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 21_32
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 1207959552_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 16_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 3221225472_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 9699455_32
  S11: state_counter = 11_10
  S11: val1 = 32_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2115832703_32
  S12: state_counter = 12_10
  S12: val1 = 0_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 2155872383_32
  S13: state_counter = 13_10
  S13: val1 = 1090519040_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 8749183_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 127_32
  S15: state_counter = 15_10
  S15: val1 = 16_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1087701119_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 16_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 159387775_32
  S18: state_counter = 18_10
  S18: val1 = 537395200_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 553652351_32
  S19: state_counter = 19_10
  S19: val1 = 1073741824_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 562040959_32
  S20: state_counter = 20_10
  S20: val1 = 16_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073758335_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 2048_32][13_5 := 21_32][16_5 := 8_32][21_5 := 2147483648_32][5_5 := 16_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for XORI.vcd
[runlim] sample:		128.3 time, 7620.9 real, 2558.9 MB
  Test for XORI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_XORI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction XORI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_XORI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_XORI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		4.8 time, 7630.9 real, 192.2 MB
[runlim] sample:		14.8 time, 7640.9 real, 202.0 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for XORI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		5.7 time, 7650.9 real, 309.0 MB
__[runlim] sample:		15.7 time, 7660.9 real, 553.5 MB
__[runlim] sample:		25.7 time, 7670.9 real, 744.5 MB
___[runlim] sample:		35.7 time, 7680.9 real, 983.2 MB
__[runlim] sample:		45.6 time, 7690.9 real, 1183.7 MB
___[runlim] sample:		55.6 time, 7700.9 real, 1466.0 MB
__[runlim] sample:		65.6 time, 7710.9 real, 1685.3 MB
_[runlim] sample:		75.6 time, 7720.9 real, 1821.7 MB
_[runlim] sample:		85.6 time, 7730.9 real, 2001.8 MB
__[runlim] sample:		95.6 time, 7740.9 real, 2243.8 MB
_[runlim] sample:		105.6 time, 7750.9 real, 2358.2 MB
_..[runlim] sample:		115.6 time, 7760.9 real, 2526.1 MB
[runlim] sample:		125.6 time, 7770.9 real, 2613.4 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for XORI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 562053247_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741839_32][1_5 := 524288_32][22_5 := 262144_32][2_5 := 16_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 1207959552_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 1610612736_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83890303_32
  S3: state_counter = 3_10
  S3: val1 = 67108864_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1082131583_32
  S4: state_counter = 4_10
  S4: val1 = 1082130432_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 33554483_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 1458451_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 1_32
  S8: rd_copy = 2_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 3221225488_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1075840639_32
  S11: state_counter = 11_10
  S11: val1 = 3221225472_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 23596671_32
  S12: state_counter = 12_10
  S12: val1 = 1073741836_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073743231_32
  S13: state_counter = 13_10
  S13: val1 = 8388608_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2172650367_32
  S14: state_counter = 14_10
  S14: val1 = 1073741839_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073743231_32
  S15: state_counter = 15_10
  S15: val1 = 1207959552_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4261412991_32
  S16: state_counter = 16_10
  S16: val1 = 1074790400_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1074267263_32
  S17: state_counter = 17_10
  S17: val1 = 1073741836_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 9437311_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1610612751_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 127_32
  S20: state_counter = 20_10
  S20: val1 = 1073741839_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1073758335_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 553652351_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741839_32][1_5 := 524288_32][22_5 := 262144_32][2_5 := 1073741840_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for XORI.vcd
  Test for XORI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_XORI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction XORI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_XORI.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_XORI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.7 time, 7780.9 real, 191.1 MB
[runlim] sample:		12.7 time, 7790.9 real, 202.1 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for XORI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.5 time, 7800.9 real, 249.8 MB
_[runlim] sample:		13.5 time, 7810.9 real, 534.1 MB
___[runlim] sample:		23.5 time, 7820.9 real, 707.8 MB
___[runlim] sample:		33.5 time, 7830.9 real, 975.9 MB
__[runlim] sample:		43.5 time, 7840.9 real, 1129.4 MB
__[runlim] sample:		53.5 time, 7850.9 real, 1405.5 MB
__[runlim] sample:		63.5 time, 7860.9 real, 1581.8 MB
__[runlim] sample:		73.5 time, 7870.9 real, 1865.2 MB
_[runlim] sample:		83.5 time, 7880.9 real, 1980.1 MB
_[runlim] sample:		93.5 time, 7890.9 real, 2071.8 MB
__[runlim] sample:		103.5 time, 7900.9 real, 2317.2 MB
_[runlim] sample:		113.5 time, 7910.9 real, 2295.8 MB
..[runlim] sample:		123.5 time, 7920.9 real, 2519.0 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for XORI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 620773503_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 1073741830_32][14_5 := 1048576_32][1_5 := 16_32][2_5 := 32_32][4_5 := 32_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 83890303_32
  S1: state_counter = 1_10
  S1: val1 = 2147745792_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553656447_32
  S2: state_counter = 2_10
  S2: val1 = 2155872256_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 1073741824_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1074791551_32
  S5: state_counter = 5_10
  S5: val1 = 1342177280_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073873971_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 15123987_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 14_32
  S8: rd_copy = 12_5
  S8: state_counter = 8_10
  S8: val1 = 134217728_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1107558400_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1107296256_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1376383_32
  S11: state_counter = 11_10
  S11: val1 = 1074790400_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4228975615_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 8388735_32
  S13: state_counter = 13_10
  S13: val1 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 8521599_32
  S14: state_counter = 14_10
  S14: val1 = 1073741828_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 393343_32
  S16: state_counter = 16_10
  S16: val1 = 1073741830_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1048703_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 1074005119_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1151_32
  S19: state_counter = 19_10
  S19: val1 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 8388735_32
  S20: state_counter = 20_10
  S20: val1 = 1073741830_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1107314815_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 83890303_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 1073741838_32][13_5 := 1073741830_32][14_5 := 1048576_32][1_5 := 16_32][2_5 := 32_32][4_5 := 32_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for XORI.vcd
[runlim] sample:		133.5 time, 7930.9 real, 2041.9 MB
  Test for XORI using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_XORI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_BLT.txt
Operator name: BLT
  No bug injection patches found for instruction BLT, skipping tests.
CoSA problem file: ./cosa/single_property_SLTI.txt
Operator name: SLTI
  Bug injection patch file for instruction SLTI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLTI.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_SLTI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		9.1 time, 7940.9 real, 202.5 MB
[runlim] sample:		19.1 time, 7950.9 real, 283.3 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		9.9 time, 7960.9 real, 508.0 MB
___[runlim] sample:		19.9 time, 7970.9 real, 674.0 MB
___[runlim] sample:		29.9 time, 7980.9 real, 882.7 MB
__[runlim] sample:		39.9 time, 7990.9 real, 1076.2 MB
___[runlim] sample:		49.9 time, 8000.9 real, 1332.0 MB
__[runlim] sample:		59.8 time, 8010.9 real, 1548.5 MB
_[runlim] sample:		69.8 time, 8020.9 real, 1805.4 MB
__[runlim] sample:		79.8 time, 8030.9 real, 2008.1 MB
_[runlim] sample:		89.8 time, 8040.9 real, 2154.9 MB
__[runlim] sample:		99.8 time, 8050.9 real, 2238.2 MB
_.[runlim] sample:		109.8 time, 8060.9 real, 2438.5 MB
.[runlim] sample:		119.8 time, 8070.9 real, 2559.2 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 150995071_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 4097_32][16_5 := 262176_32][17_5 := 16416_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 1342177281_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 557846655_32
  S2: state_counter = 2_10
  S2: val1 = 3221225472_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 155193471_32
  S3: state_counter = 3_10
  S3: val1 = 1140850688_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 88084607_32
  S4: state_counter = 4_10
  S4: val1 = 16777216_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1073742975_32
  S5: state_counter = 5_10
  S5: val1 = 1073741824_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 33554995_32
  S6: state_counter = 6_10
  S6: val1 = 0_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 18260115_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 1073741824_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 17_32
  S8: rd_copy = 1_5
  S8: state_counter = 8_10
  S8: val1 = 0_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1140850688_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073750016_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 1074791551_32
  S11: state_counter = 11_10
  S11: val1 = 1073741824_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 68681855_32
  S12: state_counter = 12_10
  S12: val1 = 4096_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 1073742975_32
  S13: state_counter = 13_10
  S13: val1 = 1073741824_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2164260991_32
  S14: state_counter = 14_10
  S14: val1 = 4096_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 1073743487_32
  S15: state_counter = 15_10
  S15: val1 = 1073741824_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 4262495103_32
  S16: state_counter = 16_10
  S16: val1 = 0_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 1073743487_32
  S17: state_counter = 17_10
  S17: val1 = 1073741824_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 17105023_32
  S18: state_counter = 18_10
  S18: val1 = 0_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 1073742975_32
  S19: state_counter = 19_10
  S19: val1 = 1073745937_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 2181038207_32
  S20: state_counter = 20_10
  S20: val1 = 4097_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1107304575_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 33560703_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[13_5 := 4097_32][16_5 := 262176_32][17_5 := 16416_32][1_5 := 4112_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTI.vcd
  Test for SLTI using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_SLTI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLTI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLTI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLTI.txt
[runlim] sample:		0.3 time, 8080.9 real, 34.5 MB
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		10.3 time, 8090.9 real, 202.4 MB
[runlim] sample:		0.9 time, 8100.9 real, 67.7 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		10.8 time, 8110.9 real, 482.4 MB
__[runlim] sample:		20.9 time, 8120.9 real, 691.9 MB
___[runlim] sample:		30.8 time, 8130.9 real, 888.6 MB
___[runlim] sample:		40.8 time, 8140.9 real, 1112.6 MB
__[runlim] sample:		50.8 time, 8150.9 real, 1364.9 MB
_[runlim] sample:		60.8 time, 8160.9 real, 1556.9 MB
__[runlim] sample:		70.8 time, 8170.9 real, 1835.0 MB
_[runlim] sample:		80.8 time, 8180.9 real, 1877.1 MB
__[runlim] sample:		90.8 time, 8190.9 real, 2104.9 MB
_[runlim] sample:		100.8 time, 8200.9 real, 2166.3 MB
_[runlim] sample:		110.8 time, 8210.9 real, 2280.0 MB
_..[runlim] sample:		120.8 time, 8220.9 real, 2419.0 MB
[runlim] sample:		130.8 time, 8230.9 real, 2574.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 553656447_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 16_32][12_5 := 16_32][14_5 := 1073741840_32][1_5 := 2147483648_32][4_5 := 2147483648_32][6_5 := 2147483648_32][8_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 16778240_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 83886207_32
  S2: state_counter = 2_10
  S2: val1 = 268435456_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 150999167_32
  S3: state_counter = 3_10
  S3: val1 = 536870912_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 1073742975_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 127_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742899_32
  S6: state_counter = 6_10
  S6: val1 = 1610612736_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 283386131_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 270_32
  S8: rd_copy = 2_5
  S8: state_counter = 8_10
  S8: val1 = 1619001344_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073741828_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 3221225472_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 279314559_32
  S11: state_counter = 11_10
  S11: val1 = 1073742084_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 44435327_32
  S12: state_counter = 12_10
  S12: val1 = 3221225472_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 127_32
  S13: state_counter = 13_10
  S13: val1 = 2097152_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 12189823_32
  S14: state_counter = 14_10
  S14: val1 = 1342177280_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 163967_32
  S15: state_counter = 15_10
  S15: val1 = 1074003968_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 6979711_32
  S16: state_counter = 16_10
  S16: val1 = 1073741856_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 4620415_32
  S17: state_counter = 17_10
  S17: val1 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 1074234495_32
  S18: state_counter = 18_10
  S18: val1 = 1073741824_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 262271_32
  S19: state_counter = 19_10
  S19: val1 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 553914495_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1090789503_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 151261311_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 16_32][12_5 := 16_32][14_5 := 1073741840_32][1_5 := 2147483648_32][2_5 := 1_32][4_5 := 2147483648_32][6_5 := 2147483648_32][8_5 := 1073741824_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTI.vcd
  Test for SLTI using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_SLTI.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction SLTI:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLTI.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_SLTI.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		2.7 time, 8240.9 real, 191.1 MB
[runlim] sample:		12.7 time, 8250.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for SLTI" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		3.5 time, 8260.9 real, 246.4 MB
_[runlim] sample:		13.5 time, 8270.9 real, 553.2 MB
___[runlim] sample:		23.5 time, 8280.9 real, 710.1 MB
___[runlim] sample:		33.5 time, 8290.9 real, 981.3 MB
__[runlim] sample:		43.5 time, 8300.9 real, 1124.0 MB
__[runlim] sample:		53.5 time, 8310.9 real, 1439.8 MB
__[runlim] sample:		63.5 time, 8320.9 real, 1633.8 MB
_[runlim] sample:		73.5 time, 8330.9 real, 1837.8 MB
__[runlim] sample:		83.5 time, 8340.9 real, 1929.6 MB
_[runlim] sample:		93.5 time, 8350.9 real, 2104.7 MB
_[runlim] sample:		103.4 time, 8360.9 real, 2262.9 MB
_[runlim] sample:		113.4 time, 8370.9 real, 2300.6 MB
_..[runlim] sample:		123.4 time, 8380.9 real, 2490.5 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for SLTI **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: imm_copy = 0_32
  I: instruction = 285223039_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[14_5 := 1048576_32][4_5 := 16777216_32][5_5 := 262144_32][6_5 := 2147483648_32][8_5 := 262_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 268466303_32
  S1: state_counter = 1_10
  S1: val1 = 33619968_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 537399423_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 545265791_32
  S3: state_counter = 3_10
  S3: val1 = 2181038080_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 76025983_32
  S4: state_counter = 4_10
  S4: val1 = 1073807360_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 1074005375_32
  S5: state_counter = 5_10
  S5: val1 = 0_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073743155_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 274998547_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: imm_copy = 262_32
  S8: rd_copy = 10_5
  S8: state_counter = 8_10
  S8: val1 = 1075838976_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 264_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1141899264_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 8552575_32
  S11: state_counter = 11_10
  S11: val1 = 1140858880_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2128775551_32
  S12: state_counter = 12_10
  S12: val1 = 1140850688_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 268435456_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 15892607_32
  S14: state_counter = 14_10
  S14: val1 = 1610612736_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 15990911_32
  S15: state_counter = 15_10
  S15: val1 = 1077936136_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 25297023_32
  S16: state_counter = 16_10
  S16: val1 = 1077936128_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 16777343_32
  S17: state_counter = 17_10
  S17: val1 = 1048576_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 1103103103_32
  S18: state_counter = 18_10
  S18: val1 = 256_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 127_32
  S19: state_counter = 19_10
  S19: val1 = 33554432_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 302518399_32
  S20: state_counter = 20_10
  S20: val1 = 262_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 1107304575_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 33560703_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 1_32][14_5 := 1048576_32][4_5 := 16777216_32][5_5 := 262144_32][6_5 := 2147483648_32][8_5 := 262_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for SLTI.vcd
[runlim] sample:		133.3 time, 8390.9 real, 2554.9 MB
  Test for SLTI using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_SLTI.patch succeeded, CoSA found a counterexample as expected.

CoSA problem file: ./cosa/single_property_ADD.txt
Operator name: ADD
  Bug injection patch file for instruction ADD:  ./testing-workflow/bug-injection-patches/alu-bug-injected_2_ADD.patch
  Original Verilog file name: decoder.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file decoder.v
patching file ridecore-original-src//decoder.v
  Running CoSA --problems ./cosa/single_property_ADD.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		4.8 time, 8400.9 real, 192.2 MB
[runlim] sample:		14.8 time, 8410.9 real, 202.0 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ADD" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		5.7 time, 8420.9 real, 305.6 MB
__[runlim] sample:		15.7 time, 8430.9 real, 543.9 MB
___[runlim] sample:		25.7 time, 8440.9 real, 760.4 MB
__[runlim] sample:		35.7 time, 8450.9 real, 1069.5 MB
__[runlim] sample:		45.7 time, 8460.9 real, 1154.9 MB
___[runlim] sample:		55.7 time, 8470.9 real, 1456.3 MB
_[runlim] sample:		65.6 time, 8480.9 real, 1615.9 MB
__[runlim] sample:		75.6 time, 8490.9 real, 1866.0 MB
_[runlim] sample:		85.6 time, 8500.9 real, 2059.4 MB
__[runlim] sample:		95.6 time, 8510.9 real, 2124.2 MB
_[runlim] sample:		105.6 time, 8520.9 real, 2249.5 MB
_.[runlim] sample:		115.6 time, 8530.9 real, 2319.0 MB
.[runlim] sample:		125.6 time, 8540.9 real, 2516.1 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ADD **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 184553599_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 2147483648_32][14_5 := 1073741824_32][16_5 := 2147483648_32][1_5 := 16384_32][4_5 := 8_32][8_5 := 128_32][9_5 := 1073766531_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 2097413_32
  S1: val2 = 603979776_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 536870912_32
  S2: val2 = 536870912_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 268435456_32
  S3: val2 = 2147483648_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 83890303_32
  S4: state_counter = 4_10
  S4: val1 = 1073741824_32
  S4: val2 = 536870912_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 285216895_32
  S5: state_counter = 5_10
  S5: val1 = 1342177280_32
  S5: val2 = 268435456_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 9733171_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 8_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32
  S8: val2 = 1074790400_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1073807360_32
  S9: val2 = 1342177280_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073766528_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 15007871_32
  S11: state_counter = 11_10
  S11: val1 = 0_32
  S11: val2 = 3221225472_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 2124875647_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1073750016_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 2097279_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 8192_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 16908415_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1073741824_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 2147483775_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1080295551_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1073741824_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 562434175_32
  S18: state_counter = 18_10
  S18: val1 = 33554432_32
  S18: val2 = 2147483648_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 150999167_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 285216895_32
  S20: state_counter = 20_10
  S20: val1 = 1073766531_32
  S20: val2 = 1073766531_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 127_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 150999167_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[10_5 := 2147483648_32][14_5 := 1073741824_32][16_5 := 2147483648_32][1_5 := 16384_32][4_5 := 8_32][8_5 := 197656_32][9_5 := 1073766531_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ADD.vcd
  Test for ADD using ./testing-workflow/bug-injection-patches/alu-bug-injected_2_ADD.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction ADD:  ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ADD.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
[runlim] sample:		0.1 time, 8550.9 real, 3.4 MB
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ADD.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		10.1 time, 8560.9 real, 202.2 MB
[runlim] sample:		0.9 time, 8570.9 real, 68.3 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ADD" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
_[runlim] sample:		10.9 time, 8580.9 real, 482.4 MB
___[runlim] sample:		20.9 time, 8590.9 real, 686.6 MB
__[runlim] sample:		30.9 time, 8600.9 real, 844.3 MB
__[runlim] sample:		40.9 time, 8610.9 real, 1112.2 MB
___[runlim] sample:		50.9 time, 8620.9 real, 1366.4 MB
__[runlim] sample:		60.9 time, 8630.9 real, 1583.0 MB
_[runlim] sample:		70.9 time, 8640.9 real, 1831.2 MB
__[runlim] sample:		80.9 time, 8650.9 real, 1929.5 MB
_[runlim] sample:		90.9 time, 8660.9 real, 2078.7 MB
_[runlim] sample:		100.9 time, 8670.9 real, 2191.4 MB
_[runlim] sample:		110.9 time, 8680.9 real, 2291.5 MB
_..[runlim] sample:		120.9 time, 8690.9 real, 2503.1 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ADD **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 285347967_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[11_5 := 16_32][12_5 := 1090519040_32][13_5 := 16777216_32][15_5 := 1073741824_32][16_5 := 16777216_32][1_5 := 262144_32][4_5 := 4_32][9_5 := 2097152_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 553652351_32
  S1: state_counter = 1_10
  S1: val1 = 67109889_32
  S1: val2 = 1073758213_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 150999167_32
  S2: state_counter = 2_10
  S2: val1 = 1073741824_32
  S2: val2 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 83886207_32
  S3: state_counter = 3_10
  S3: val1 = 268435456_32
  S3: val2 = 2415919104_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 285217407_32
  S4: state_counter = 4_10
  S4: val1 = 1082130432_32
  S4: val2 = 67108864_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 150999167_32
  S5: state_counter = 5_10
  S5: val1 = 67108864_32
  S5: val2 = 2147483648_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 13076147_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 13_5
  S8: state_counter = 8_10
  S8: val1 = 268435456_32
  S8: val2 = 1073741824_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 1074266112_32
  S9: val2 = 3221225472_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 1073741825_32
  S10: val2 = 1073758208_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 28770431_32
  S11: state_counter = 11_10
  S11: val1 = 0_32
  S11: val2 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 4273406079_32
  S12: state_counter = 12_10
  S12: val1 = 1073807360_32
  S12: val2 = 1073741824_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 16777343_32
  S13: state_counter = 13_10
  S13: val1 = 0_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2123497855_32
  S14: state_counter = 14_10
  S14: val1 = 1073741824_32
  S14: val2 = 1090519040_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 4194431_32
  S15: state_counter = 15_10
  S15: val1 = 0_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1077706879_32
  S16: state_counter = 16_10
  S16: val1 = 1073741824_32
  S16: val2 = 1090519040_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 383_32
  S17: state_counter = 17_10
  S17: val1 = 0_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 553750911_32
  S18: state_counter = 18_10
  S18: val1 = 536870912_32
  S18: val2 = 268435456_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 25170303_32
  S19: state_counter = 19_10
  S19: val1 = 0_32
  S19: val2 = 0_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 729813375_32
  S20: state_counter = 20_10
  S20: val1 = 1073741824_32
  S20: val2 = 1090519040_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 570425471_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 33560703_32
  S22: state_counter = 22_10
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ADD.vcd
[runlim] sample:		130.9 time, 8700.9 real, 2561.7 MB
  Test for ADD using ./testing-workflow/bug-injection-patches/alu-bug-injected_1_ADD.patch succeeded, CoSA found a counterexample as expected.
  Bug injection patch file for instruction ADD:  ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ADD.patch
  Original Verilog file name: alu.v
HEAD is now at 75fdc28 testing workflow: adapted readme
  Patching original file alu.v
patching file ridecore-original-src//alu.v
  Running CoSA --problems ./cosa/single_property_ADD.txt
Parsing file "./cosa/ridecore.vlist"... Reading source files from "ridecore.vlist"... [runlim] sample:		5.4 time, 8710.9 real, 215.5 MB
[runlim] sample:		15.4 time, 8720.9 real, 202.4 MB
DONE
Parsing file "./cosa/reset_procedure.ets"... DONE
Parsing file "./cosa/init.ssts"... DONE
Parsing file "./cosa/state_copy.ssts"... DONE
Parsing file "./cosa/nop_m.ssts"... DONE
Solving "Single Instruction for ADD" 
WARNING: Using default_initial_value with arrays, but btor does not support constant arrays. Any assumptions on initial array values will have to be done manually
[runlim] sample:		6.3 time, 8730.9 real, 364.6 MB
__[runlim] sample:		16.3 time, 8740.9 real, 547.1 MB
___[runlim] sample:		26.3 time, 8750.9 real, 770.6 MB
__[runlim] sample:		36.3 time, 8760.9 real, 1019.2 MB
___[runlim] sample:		46.3 time, 8770.9 real, 1249.3 MB
__[runlim] sample:		56.3 time, 8780.9 real, 1462.6 MB
__[runlim] sample:		66.3 time, 8790.9 real, 1731.1 MB
_[runlim] sample:		76.2 time, 8800.9 real, 1878.8 MB
__[runlim] sample:		86.3 time, 8810.9 real, 2094.0 MB
_[runlim] sample:		96.2 time, 8820.9 real, 2190.1 MB
_[runlim] sample:		106.2 time, 8830.9 real, 2276.4 MB
_..[runlim] sample:		116.2 time, 8840.9 real, 2456.3 MB
[runlim] sample:		126.2 time, 8850.9 real, 2542.3 MB
 FALSE

*** SUMMARY ***

** Problem Single Instruction for ADD **
Description: "Check for Single Instruction"
Result: FALSE
Counterexample:
---> INIT <---
  I: clk = 0_1
  I: instruction = 184553599_32
  I: rd_copy = 0_5
  I: reset_done = False
  I: reset_x = 0_1
  I: state_counter = 0_10
  I: val1 = 0_32
  I: val2 = 0_32
  I: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 4194336_32][14_5 := 1610612768_32][16_5 := 2147484480_32][24_5 := 2048_32][25_5 := 262144_32][6_5 := 1073741824_32]

---> STATE 1 <---
  S1: clk = 1_1
  S1: instruction = 285216895_32
  S1: state_counter = 1_10
  S1: val1 = 538968325_32
  S1: val2 = 2214596609_32

---> STATE 2 <---
  S2: clk = 0_1
  S2: instruction = 553652351_32
  S2: state_counter = 2_10
  S2: val1 = 4194304_32
  S2: val2 = 2147483648_32

---> STATE 3 <---
  S3: clk = 1_1
  S3: instruction = 285216895_32
  S3: state_counter = 3_10
  S3: val1 = 2281701376_32
  S3: val2 = 2818572288_32

---> STATE 4 <---
  S4: clk = 0_1
  S4: instruction = 553652351_32
  S4: state_counter = 4_10
  S4: val1 = 2147483648_32
  S4: val2 = 2684354560_32

---> STATE 5 <---
  S5: clk = 1_1
  S5: instruction = 822087807_32
  S5: state_counter = 5_10
  S5: val1 = 536870912_32
  S5: val2 = 16777216_32

---> STATE 6 <---
  S6: clk = 0_1
  S6: instruction = 1073742867_32
  S6: state_counter = 6_10
  S6: val1 = 1073741824_32
  S6: val2 = 1073741824_32

---> STATE 7 <---
  S7: clk = 1_1
  S7: instruction = 15074355_32
  S7: reset_done = True
  S7: reset_x = 1_1
  S7: state_counter = 7_10
  S7: val1 = 0_32
  S7: val2 = 0_32

---> STATE 8 <---
  S8: clk = 0_1
  S8: rd_copy = 8_5
  S8: state_counter = 8_10
  S8: val1 = 3221225472_32
  S8: val2 = 1610612736_32

---> STATE 9 <---
  S9: clk = 1_1
  S9: state_counter = 9_10
  S9: val1 = 4194304_32
  S9: val2 = 1073743872_32

---> STATE 10 <---
  S10: clk = 0_1
  S10: state_counter = 10_10
  S10: val1 = 3221225472_32
  S10: val2 = 1073741856_32

---> STATE 11 <---
  S11: clk = 1_1
  S11: instruction = 9437311_32
  S11: state_counter = 11_10
  S11: val1 = 4194432_32
  S11: val2 = 0_32

---> STATE 12 <---
  S12: clk = 0_1
  S12: instruction = 1343751295_32
  S12: state_counter = 12_10
  S12: val1 = 1073741824_32
  S12: val2 = 1610612768_32

---> STATE 13 <---
  S13: clk = 1_1
  S13: instruction = 4194431_32
  S13: state_counter = 13_10
  S13: val1 = 4194336_32
  S13: val2 = 0_32

---> STATE 14 <---
  S14: clk = 0_1
  S14: instruction = 2131001727_32
  S14: state_counter = 14_10
  S14: val1 = 1342177280_32
  S14: val2 = 1610612768_32

---> STATE 15 <---
  S15: clk = 1_1
  S15: instruction = 8388735_32
  S15: state_counter = 15_10
  S15: val1 = 4194336_32
  S15: val2 = 0_32

---> STATE 16 <---
  S16: clk = 0_1
  S16: instruction = 1099169919_32
  S16: state_counter = 16_10
  S16: val2 = 1610612736_32

---> STATE 17 <---
  S17: clk = 1_1
  S17: instruction = 127_32
  S17: state_counter = 17_10
  S17: val1 = 2147483648_32
  S17: val2 = 0_32

---> STATE 18 <---
  S18: clk = 0_1
  S18: instruction = 537071743_32
  S18: state_counter = 18_10
  S18: val1 = 1075838976_32
  S18: val2 = 1048576_32

---> STATE 19 <---
  S19: clk = 1_1
  S19: instruction = 285216895_32
  S19: state_counter = 19_10
  S19: val1 = 1073741824_32
  S19: val2 = 2147483648_32

---> STATE 20 <---
  S20: clk = 0_1
  S20: instruction = 150999295_32
  S20: state_counter = 20_10
  S20: val1 = 4194336_32
  S20: val2 = 1610612768_32

---> STATE 21 <---
  S21: clk = 1_1
  S21: instruction = 127_32
  S21: state_counter = 21_10

---> STATE 22 <---
  S22: clk = 0_1
  S22: instruction = 536877183_32
  S22: state_counter = 22_10
  S22: pipe.aregfile.regfile.mem = Array{BV{5}, BV{32}}(0_32)[12_5 := 4194336_32][14_5 := 1610612768_32][16_5 := 2147484480_32][24_5 := 2048_32][25_5 := 262144_32][6_5 := 1073741824_32][8_5 := 2688548864_32]
Counterexamples: [1], [2]
Traces (max) length: 23

*** TRACES ***

[1]:	trace[1]-Single Instruction for ADD.vcd
  Test for ADD using ./testing-workflow/bug-injection-patches/alu-bug-injected_0_ADD.patch succeeded, CoSA found a counterexample as expected.

Cleaning up temporary files.
  cleanup: resetting any local changes
HEAD is now at 75fdc28 testing workflow: adapted readme
[runlim] end:			Tue Apr 16 20:26:16 2019
[runlim] status:		ok
[runlim] result:		0
[runlim] children:		199030
[runlim] real:			8858.51 seconds
[runlim] time:			145.70 seconds
[runlim] space:			2683.3 MB
[runlim] samples:		88576
